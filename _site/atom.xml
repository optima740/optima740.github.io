<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>AndreyMelnikov.MyBlog</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2021-05-19T18:33:06+03:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Andrey Melnikov</name>
   <email>k253vo@mail.ru</email>
 </author>

 
 <entry>
   <title>Вселенная программирования. ООП.</title>
   <link href="http://localhost:4000/2021/05/19/programming-universe9/"/>
   <updated>2021-05-19T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/05/19/programming universe9</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Продолжаю развивать тему &lt;a href=&quot;https://optima740.github.io/2020/12/25/programming-universe1/&quot;&gt;«Вселенная программирования»&lt;/a&gt;. В данной статье я хотел бы немного затронуть парадигму ООП (ну или концепцию, я больше склоняюсь к тому, что ООП это концепция в рамках императивной парадигмы, нежели отдельная парадигма). Ну или точнее, показать, что абстракция данных, рассматриваемая в предыдущих статьях, применительно к сущности «объект», получила свое воплощение в отдельной концепции – ООП.&lt;/p&gt;

&lt;p&gt;На сегодняшний день, наверное, только ленивый не слышал об &lt;strong&gt;объектно-ориентированном программировании&lt;/strong&gt; (ООП). Эту тему очень любят спрашивать на собеседованиях. Я сам буквально недавно сталкивался с этим. Причем мой ответ не очень удовлетворил интервьюверов. Да и сам я понимал, что мои объяснения принципов ООП «своими словами» звучали немного размыто. Так что, давайте разбираться во всем в данной статье из «Вселенной».&lt;/p&gt;

&lt;p&gt;ООП, как методология, появилась еще в 60х годах, тогда в Массачусетском технологическом университете Алан Кэй, и чуть позднее Иван Сазерленд определяет понятия «объект» и «экземпляр» и связывает их с концепцией классов. Однако, в доминирующую методологию ООП войдет гораздо позднее, примерно в начале 90х.&lt;/p&gt;

&lt;p&gt;Сама идеология ООП создавалась как связь поведения сущности (объекта) с её данными в рамках идеи спроецировать объекты реального мира в программный код. В итоге мы имеем высокоуровневую абстракцию, которая облегчает взаимодействие для разработчиков, т. к. людям свойственно воспринимать окружающий мир, как множество взаимодействующих между собой объектов, поддающихся определенной классификации. 
Идею ООП описывают ее важнейшие принципы. Да-да, те самые всем до боли известные:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Полиморфизм.&lt;/li&gt;
  &lt;li&gt;Наследование.&lt;/li&gt;
  &lt;li&gt;Инкапсуляция.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Те самые принципы, о которых так любят все спрашивать, и ждут совершенно типовых ответов. Но давайте посмотрим на них с точки зрения абстракций, о которых мы говорили ранее во «Вселенной программирования».&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Полиморфизм.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Важнейший принцип ООП. Сущность можно назвать полиморфной, если она может работать с аргументами различных типов.&lt;br /&gt;
В более техническом смысле, &lt;strong&gt;полиморфизм&lt;/strong&gt; - это автоматический вызов корректного метода соответствующего класса-потомка, полностью совпадающего по сигнатуре с родительским методом предка (механизм переопределения методов). То есть &lt;strong&gt;выбор подходящего метода в момент его вызова будет выполнен автоматически в зависимости от типов конкретных аргументов&lt;/strong&gt;.&lt;br /&gt;
Если говорить о семантике полиморфизма, то полиморфизм – это способность системы использовать объекты с одинаковым интерфейсом (сигнатурой) без учета информации о внутренней реализации этих объектов.&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим следующий пример:&lt;br /&gt;
Водитель приехал в сервис с задачей починить свой автомобиль. Так вот, автомобиль будет отремонтирован автосервисом в любом случае, но с учетом специализации мастера-ремонтника.&lt;br /&gt;
В данном случае задача «починить» - полиморфна. Она может быть поставлена любому типу мастера-ремонтника, потому что все ремонтники умеют ремонтировать автомобиль, но каждый делает это с учетом своей специализации.&lt;br /&gt;
Для ясности, я приведу пример, используя псевдокод.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ВодительАлекс = Водитель(…) – наследник класса Водитель.
МастерРемонтаДжон = Моторист(…) – Наследник класса РемонтникАвтомобилей.
ВодительАлекс.ПочинитьАвтомобиль(МастерРемонтаДжон)  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;В данном примере в метод &lt;code class=&quot;highlighter-rouge&quot;&gt;ПочинитьАвтомобиль()&lt;/code&gt; класса &lt;code class=&quot;highlighter-rouge&quot;&gt;Водитель&lt;/code&gt; в качестве аргументов можно передавать не просто наследников класса &lt;code class=&quot;highlighter-rouge&quot;&gt;РемонтникАвтомобилей&lt;/code&gt; но и другие классы, например, &lt;code class=&quot;highlighter-rouge&quot;&gt;ЗаправщикКондиционера&lt;/code&gt;, которые поддерживают (реализуют) интерфейс (соответствует сигнатуре), требуемый методом &lt;code class=&quot;highlighter-rouge&quot;&gt;ПочинитьАвтомобиль()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ну или более простой пример, так сказать, более примитивное ООП.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Автомобиль() – родительский класс (АТД)  

ЛегковойАвтомобиль(Автомобиль) – Наследник класса Автомобиль,  
реализующий его абстрактные методы.  

ФордФокус = ЛегковойАвтомобиль() – Экземпляр класса ЛегковойАвтомобиль.  

ФордФокус.ЗапускДвигателя() – будет вызван конкретный метод  
ЗапускДвигателя() класса ЛегковойАвтомобиль. При этом  
родительский АТД Автомобиль обязательно содержит свой  
собственный абстрактный метод ЗапускДвигателя().   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Наследование.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Избыточность кода является большой проблемой при разработке программных систем. Повторяющийся код служит источником ошибок, потому что, если баг был обнаружен и пофиксен в одном месте, то вполне вероятно, что могли упустить все повторяющиеся участки данного кода. Тоже само касается и внесения изменений в код. Каждый раз необходимо искать все повторяющиеся фрагменты.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Наследование&lt;/strong&gt; можно охарактеризовать как определение (создание) абстракций с выделением их общих взаимосвязей, но без повторений общих частей кода.&lt;br /&gt;
Другими словами, &lt;strong&gt;наследование&lt;/strong&gt; – это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью.&lt;br /&gt;
Класс, от которого производится наследование, называется базовым или родительским. Новый класс – потомком, наследником или производным классом (хотя правильнее всего будет называть его подтипом - &lt;em&gt;subtype&lt;/em&gt;).&lt;br /&gt;
Необходимо отметить, что класс-потомок полностью удовлетворяет спецификации родительского класса, однако может иметь дополнительную функциональность (расширяет родительскую функциональность). Если мы говорим о построении более-менее сложной иерархии наследования, используя абстракцию данных, то с точки зрения интерфейсов (или АТД), каждый класс-наследник полностью реализует интерфейс (абстракцию) родительского класса. И из этого мы плавно переходим к методу подстановки.&lt;/p&gt;

&lt;p&gt;В серьезном взрослом программировании наследование должно отвечать принципу подстановки Барбары Лисков (Буква &lt;strong&gt;L&lt;/strong&gt; из правил &lt;strong&gt;SOLID&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;Допустим у нас есть небольшая иерархия наследования:&lt;br /&gt;
Родительский класс &lt;code class=&quot;highlighter-rouge&quot;&gt;Parrent&lt;/code&gt;, и его класс-потомок (подтип) &lt;code class=&quot;highlighter-rouge&quot;&gt;Child&lt;/code&gt;. (&lt;code class=&quot;highlighter-rouge&quot;&gt;Parrent --&amp;gt; Child&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Также у нас есть функция, однозначно корректно работающая с входным параметром &lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt;:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;function(arg)&lt;/code&gt;, где &lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt; – это объект типа &lt;code class=&quot;highlighter-rouge&quot;&gt;Parrent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Так вот метод подстановки Барбары Лисков (&lt;strong&gt;Liskov substitution principle, LSP&lt;/strong&gt;) заключается в том, что если мы подставим в нашу &lt;code class=&quot;highlighter-rouge&quot;&gt;function(arg)&lt;/code&gt;, аргумет &lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt; типа &lt;code class=&quot;highlighter-rouge&quot;&gt;Child&lt;/code&gt; (подтип &lt;code class=&quot;highlighter-rouge&quot;&gt;Parrent&lt;/code&gt;), то функция должна также корректно работать, как и работала с аргументом родительского типа.&lt;br /&gt;
Это говорит о том, что подклассы (или классы наследники), должны поддерживать родительский функционал и не должны менять родительские интерфейсы.&lt;/p&gt;

&lt;p&gt;Наследование, как концепция относится к понятию «&lt;strong&gt;is-a&lt;/strong&gt;» то есть класс «является» подклассом другого класса, в отличие от другой концепции &lt;strong&gt;композиции&lt;/strong&gt;, которая относится к понятию «&lt;strong&gt;has-a&lt;/strong&gt;», что означает данный класс «содержит» в себе (или ссылается на) экземпляр другого класса. 
При сложном проектировании программных систем, использование наследования лучше избегать, и если уж избежать этого не получается, то наследование должно соответствовать LSP (принципу подстановки описанному выше). Во всех остальных случаях, лучше использовать композицию.&lt;/p&gt;

&lt;p&gt;Но это тема уже для отдельного разговора.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Инкапсуляция.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Если прямо и дословно, то инкапсуляция - это сокрытие реализации внутри сущности, концепция черного ящика. Но именно такой ответ, не всегда устраивает, например, интервьюверов на собеседовании :)&lt;br /&gt;
Если более детально разобрать этот принцип, то можно сказать, что &lt;strong&gt;инкапсуляция&lt;/strong&gt; - это такое свойство системы, позволяющее объединить данные и допустимые методы работы с этими данными внутри сущности (класса или объекта).&lt;br /&gt;
Получается, что инкапсуляция — это не просто сокрытие. А вот сокрытие - это следствие инкапсуляции (обертывании) данных и методов внутри класса. И, соответственно, из этого и вытекает механизм модификации доступа (&lt;em&gt;Public, Protected, Private&lt;/em&gt;), при помощи которого разработчик может определять различные градации доступа к внутренней реализации своего класса. Напомню:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Public&lt;/em&gt; – доступ к данным полностью разрешен из вне.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Protected&lt;/em&gt; - доступ к данным возможен только внутри своего класса или из классов-предков, которые состоят в иерархии наследования к данному классу.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Private&lt;/em&gt; – доступ к данным возможет только внутри своего класса.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На этом по ООП я пожалуй закончу. Конечно ООП является огромной темой для отдельного изучения и правильного понимания, и безусловно данная концепция (парадигма) стала одной из важнейших и опорных тем в мире программирования.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Ключевые концепции ч5 - Абстракция данных.</title>
   <link href="http://localhost:4000/2021/04/09/programming-universe8/"/>
   <updated>2021-04-09T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/04/09/programming universe8</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Заключительная из &lt;a href=&quot;https://optima740.github.io/2021/02/02/programming-universe4/&quot;&gt;рассматриваемых&lt;/a&gt; ключевых концепций программирования – &lt;strong&gt;абстракция данных&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;На самом деле, умение правильно выстраивать и далее работать с абстракциями, уже само по себе очень мощный скилл для программиста.  Это, как с языками программирования. Есть низкоуровневые, например, Ассемблер, а есть высокоуровневые, например, Питон.&lt;br /&gt;
Так вот, суть абстракции - &lt;em&gt;скрыть реализацию мелких деталей, оставив на поверхности самые главные составляющие общей картины&lt;/em&gt;.&lt;br /&gt;
Простыми словами, &lt;em&gt;абстракция – это высокоуровневое представление какой-либо системы в виде модели&lt;/em&gt;. Ну а если не простыми словами, то читаем дальше:)&lt;/p&gt;

&lt;p&gt;Если говорить применительно к данным, то &lt;strong&gt;абстракция данных&lt;/strong&gt; – это такой способ организации структур данных по четким формальным правилам, который гарантирует, что эти структуры будут использоваться в системе корректно.&lt;br /&gt;
Под внутренней и внешней частями мы подразумеваем возможное наличие в абстракции явных именованных состояний, которые могут быть как видимы (но не доступны для модификации напрямую), так и невидимы извне.&lt;br /&gt;
&lt;em&gt;Интерфейс&lt;/em&gt;, как понятие из ООП, как раз яркий пример абстракции данных, имеющий внутреннюю и внешнюю часть.  Все операции с внутренней и внешней частями выполняются исключительно через интерфейс, обеспечивающий к ним корректный доступ.&lt;/p&gt;

&lt;p&gt;В этом случае для программной системы мы имеем:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Гарантию, что абстракция данных работает корректно, т.к интерфейс задает набор авторизованных операций над структурой данных, и никакие другие действия над ней недопустимы.&lt;/li&gt;
  &lt;li&gt;Система может быть разделена на множества отдельных абстракций, реализованных независимо.&lt;/li&gt;
  &lt;li&gt;Мы имеем возможность разделить процесс разработки между большим кол-вом людей. За каждую абстракцию отвечает свой разработчик.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Парадигма ООП базируется на абстракциях данных с наследованием и полиморфизмом.&lt;br /&gt;
Можно получить четыре способа организации абстракций данных, если скомпоновать их ключевые характеристики в зависимости от:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;использования или не использования &lt;em&gt;именованного состояния&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;объединения физических данных в одну сущность (&lt;em&gt;класс/пакет&lt;/em&gt;) или сохранения их разделенными (&lt;em&gt;АТД – абстрактный класс или интерфейс&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Первые два варианта наиболее часто встречаются нам на практике:&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Объект&lt;/strong&gt;. Объединив пакет с именованным состоянием, получаем классический, объект в Java или Python: внутренние поля-идентификаторы задают состояние, а методы - это выполняемые над ним операции.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2021-04-09/pic1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Абстрактный тип данных&lt;/strong&gt; (АТД) – очень хорошая реализация концепции абстракции данных для ООП. Это Противоположный случай, когда мы используем абстрактный тип данных, отделённый от операций (например, тип Integer в Java). Целые числа представляются конкретными значениями (1, 2, 3, …), которые можно передавать в качестве аргументов внешним операциям (+, -, *, / …). Притом какие-либо промежуточные состояния значений (непосредственных чисел 1,2,3,…), не допускаются. Таким образом, мы имеем классический АТД.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2021-04-09/pic2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;А вот два других случая встречаются реже:&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;АТД с именованным состоянием&lt;/strong&gt; (например, частично реализованный класс).&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;Декларативный объект&lt;/strong&gt; (когда есть только описание объекта, но состояния он не содержит)&lt;/p&gt;

&lt;p&gt;В вопросе правильного проектирования программных систем, абстракция данных имеет очень важную роль. При реализации правильных абстракций, мы уже на этапе проектирования можем добиться доказанной корректности пользовательских типов данных (классов) и описать допустимые операции над ними, что дает минимизацию багов на этапе разработки, связанных с типизацией (например, при динамической типизации в Python).&lt;/p&gt;

&lt;p&gt;Я также могу привести собственный пример использования концепции абстракции данных. Вот &lt;a href=&quot;https://github.com/optima740/OOP-Designing-Python-&quot;&gt;ссылочка&lt;/a&gt; на мой гитхаб, где я организовывал различные структуры данных, через концепцию АТД.&lt;/p&gt;

&lt;p&gt;Подводя итог, можно сказать, что в подсерии статей &lt;a href=&quot;https://optima740.github.io/2021/02/02/programming-universe4/&quot;&gt;Вселенная программирования. Ключевые концепции&lt;/a&gt; я постарался описать основные (ключевые) концепции программирования (&lt;em&gt;именованное состояние&lt;/em&gt;, &lt;em&gt;замыкания&lt;/em&gt;, &lt;em&gt;параллелизм&lt;/em&gt; и &lt;em&gt;абстракция данных&lt;/em&gt;) комбинации которых используются при разработке практически любых программных систем.&lt;br /&gt;
Кроме того, из темы абстракции данных плавно вытекает тема важнейших принципов ООП. Но об этом в следующих статьях.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Ключевые концепции ч4 - Темная сторона параллелизма.</title>
   <link href="http://localhost:4000/2021/04/05/programming-universe7/"/>
   <updated>2021-04-05T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/04/05/programming universe7</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Продолжаем тему концепции &lt;a href=&quot;https://optima740.github.io/2021/03/25/programming-universe6/&quot;&gt;параллелизма&lt;/a&gt;.&lt;br /&gt;
На первый взгляд параллельное программирование выглядит многообещающим и эффективным способом повысить производительность программной системы. &lt;br /&gt;
Но есть один существенный момент в данной концепции, который является и основной проблемой. После того, как в программной системе появились именованные состояния и параллелизм одновременно- это привело к появлению явного (наблюдаемого) &lt;strong&gt;недетерминизма&lt;/strong&gt; (вспоминаем &lt;a href=&quot;https://optima740.github.io/2021/01/26/programming-universe3/&quot;&gt;статью&lt;/a&gt; про вычислительные модели и степень недетерминизма). То есть программа от вызова к вызову может выдавать разные результаты на одних и тех же входных данных. Так случается потому, что потоки могут получать доступ к именованным состояниям (переменным) в непредсказуемом порядке, который зависит от внешних условий. И причина этой изменчивости (недетерминизма) в том, что точное время, когда будет выполнена та или иная инструкция в программе теперь неизвестно потому, что потоки работают независимо и не представляют, какие инструкции выполняются в других потоках. Иначе данную ситуацию в параллельном программировании называют &lt;strong&gt;проблемой конкуренции&lt;/strong&gt; или &lt;strong&gt;race condition&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Рассмотрим пример кода Python ниже.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# функция 1 потока
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thread_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# функция 2 потока
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thread_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;В результате такой работы в переменной &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;&lt;/strong&gt; будет либо 1, либо 2, но мы не можем заранее предсказать, какое значение именно. Причина в том, что в реальных условиях работа потоков чередуется, причём в общем случае невозможно понять как.&lt;br /&gt;
Дело в том, что исходный код программы транслируется интерпретатором в двоичный машинный код (если упростить), и механизм обеспечения одновременного выполнения потоков выделяет, так называемый, квант времени поочерёдно каждому потоку. За этот квант времени может, например, выполниться всего одна машинная инструкция, то есть явную привязку квантованного выполнения к исходному коду выполнить фактически невозможно. 
Но, даже если мы будем условно считать, что за один квант выполняется одна инструкция исходного кода, ситуация не проясняется.&lt;/p&gt;

&lt;p&gt;В представленном коде выше, я привел самый простой пример, но в реальных программах, где смешиваются параллельные вычисления и именованные состояния, постоянно возникают значительно более сложные конфликтные ситуации. &lt;br /&gt;
В истории существует печально известный пример ситуации с &lt;em&gt;race condition&lt;/em&gt; - это канадский аппарат лучевой терапии &lt;a href=&quot;https://ru.wikipedia.org/wiki/Therac-25&quot;&gt;&lt;em&gt;Therac-25&lt;/em&gt;&lt;/a&gt;, который из-за подобного бага в своем софте выдавал пациентам дозы, в тысячи раз превышающие назначенные, что приводило к смертям и тяжёлым заболеваниям. Одна и та же переменная в этом аппарате использовалась сразу в двух вычислительных задачах, которые могли выполняться одновременно.&lt;/p&gt;

&lt;p&gt;Из всего выше изложенного следует вывод: &lt;em&gt;по возможности не использовать вместе параллелизм и именованные состояния&lt;/em&gt;. Программу практически всегда можно спроектировать так, чтобы разделить эти аспекты, или, в самом крайнем случае, ограниченно и наглядно совместить их в небольшой и хорошо изолированной части проекта.&lt;/p&gt;

&lt;p&gt;Однако, существуют способы организовать программу таким образом, что одновременное использование параллелизма и именованных состояний будет давать корректный результат и в целом такая схема остается вполне применимой. Наверное, одним из самых известных и хороших способов правильно организовать программирование с параллелизмом и состоянием - это использовать &lt;strong&gt;атомарные операции&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Атомарная операция&lt;/em&gt;, как бы, инкапсулирует внутри себя некоторые инструкции кода, и делает их неделимыми во времени. То есть, мы имеем начало атомарной операции и сразу результат, а промежуточные состояния внутри атомарной операции нам недоступны.&lt;br /&gt;
Поэтому одним из способов борьбы с &lt;em&gt;race conditions&lt;/em&gt; является организация потоково-безопасной (thread-safe) работы программы. Программисту предоставляется механизм атомарного выполнения- набор действий над общей переменной объявляется некоторому потоку атомарным, и пока он полностью не закончится, никакой другой поток не сможет работать с этой переменной.&lt;br /&gt;
С помощью атомарных операций мы можем решить вышеприведённую проблему с неверным итоговым изменением переменной &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;&lt;/strong&gt; в нескольких потоках. Идея заключается в том, чтобы обеспечить такой режим работы, когда тело каждого потока будет атомарным.&lt;/p&gt;

&lt;p&gt;Рассмотрим следующий псевдокод:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thread A
a = 0
запуск thread B
начало атомарной операции
a = a + 1
конец атомарной операции
ожидание окончания работы thread B
print a

thread B
начало атомарной операции
a = a + 2
конец атомарной операции
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;В результате на консоль всегда будет выводиться 3.&lt;/p&gt;

&lt;p&gt;В различных языках программирования атомарные операции представлены по-разному. Например, в Python данные операции можно реализовать с помощью &lt;em&gt;блокировок&lt;/em&gt; (Lock). 
Класс &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RLock&lt;/code&gt;&lt;/strong&gt; – это блокировка (или замок).&lt;br /&gt;
&lt;em&gt;Блокировка&lt;/em&gt; -  фундаментальный механизм синхронизации, который предоставлен модулем &lt;code class=&quot;highlighter-rouge&quot;&gt;threading&lt;/code&gt; в Python.  &lt;br /&gt;
Замки используются для синхронизации доступа к общим ресурсам. Для каждого такого источника создается объект &lt;code class=&quot;highlighter-rouge&quot;&gt;Lock&lt;/code&gt;. Когда нам нужно получить доступ к общему ресурсу, мы вызываем &lt;code class=&quot;highlighter-rouge&quot;&gt;acquire&lt;/code&gt; для того, чтобы поставить блок на время работы потока с данным ресурсом, после чего вызываем &lt;code class=&quot;highlighter-rouge&quot;&gt;release&lt;/code&gt;, тем самым открывая доступ к общему ресурсу:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Выполнит блокировку данного участка кода
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#доступ к общим ресурсам
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Снятие блокировки 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В любом случае во избежание ситуации &lt;em&gt;race condition&lt;/em&gt;, при организации параллельных вычислений всегда необходимо обеспечивать атомарность операций, насколько это возможно.&lt;/p&gt;

&lt;p&gt;В следующей статье мы поговорим о еще одной ключевой концепции программирования – &lt;strong&gt;абстракции данных&lt;/strong&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Ключевые концепции ч3 - Параллелизм.</title>
   <link href="http://localhost:4000/2021/03/25/programming-universe6/"/>
   <updated>2021-03-25T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/03/25/programming universe6</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Продолжаю развивать начатую тему &lt;a href=&quot;https://optima740.github.io/2020/12/25/programming-universe1/&quot;&gt;&lt;strong&gt;вселенная программирования&lt;/strong&gt;&lt;/a&gt;, описываю свое понимание основных концепций программирования. В этой статье я опишу следующую (начало главы &lt;a href=&quot;https://optima740.github.io/2021/02/02/programming-universe4/&quot;&gt;тут&lt;/a&gt;) ключевую концепцию программирования – &lt;strong&gt;параллелизм&lt;/strong&gt;.&lt;br /&gt;
Ранее я уже немножко затрагивал тему синхронного и асинхронного программирования вот в этой своей &lt;a href=&quot;https://optima740.github.io/2020/11/11/imperativ_programm_function-call/&quot;&gt;статье&lt;/a&gt;. Но в тот раз это было очень-очень поверхностно, в рамках понимания совсем другой темы. Сегодня мы поговорим о параллелизме более подробно и концептуально.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Параллелизм&lt;/em&gt; - &lt;strong&gt;независимое и потенциально одновременное выполнение инструкций&lt;/strong&gt;. Программа конструируется из независимых частей, которые, в свою очередь, могут быть исполнены в любом порядке и это не приведет к проблеме коллизии.&lt;br /&gt;
Когда мы говорим о параллелизме, стоит сразу сделать оговорку. Параллелизм – как концепция независимого, одновременного выполнения, применительно к программированию, не совсем подходит. Потому, что независимые части кода могут выполняться условно одновременно на единственном процессоре, используя механизм разделения времени между процессами.&lt;br /&gt;
Ну, например, в языке Python (по крайней мере в его версиях на момент написания статьи) нет, как таковой, поддержки многопоточности (параллелизма) именно самим языком. Но есть много фреймворков и библиотек, которые эту возможность предоставляют, например, модуль &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;threading&lt;/code&gt;&lt;/strong&gt; или &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acyncio&lt;/code&gt;&lt;/strong&gt;.&lt;br /&gt;
Однако, не стоит забывать, что интерпретатор языка - CPython использует GIL (&lt;em&gt;Global Interpreter Lock&lt;/em&gt;). Суть GIL заключается в том, что выполнять байт код может только один поток. Это нужно для того, чтобы упростить работу с памятью (на уровне интерпретатора). В этой ситуации, условно, все задачи которые программист хочет решить при помощи параллельных вычислений можно разделить на две большие группы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CPU-bound&lt;/strong&gt;  (те, что преимущественно используют процессор для своего выполнения, например, математические) – в данном случае необходимо использовать модуль &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multiprocessing&lt;/code&gt;&lt;/strong&gt;. Этот модуль использует весь потенциал всех ядер в процессоре.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IO-bound&lt;/strong&gt; (задачи, работающие с вводом-выводом: диск, сеть и т.п.) для повышения производительности в данном классе задач, необходимо использовать модули &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;threading&lt;/code&gt;&lt;/strong&gt; или &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acyncio&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;А вот параллелизм, применительно к аппаратному понятию, более точен к своему определению. Мы имеем именно одновременность выполнения. Одна программа может выполняться параллельно на мультипроцессорной системе (засчёт автоматического программно-аппаратного распараллеливания). Опять же, пример с Python, но с использованием модуля многопроцессорной обработки &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multiprocessing&lt;/code&gt;&lt;/strong&gt;. В данном случае, мы получаем настоящее параллельное выполнение потоков и, как результат, линейное увеличение скорости вычислений от количества ядер процессора.&lt;/p&gt;

&lt;p&gt;Существуют две основные парадигмы внутри концепции параллелизма:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;параллелизм с разделяемым состоянием&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;параллелизм с обменом сообщениями&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;При &lt;em&gt;параллелизме с разделяемыми состоянием&lt;/em&gt; мы имеем дело с понятиями &lt;strong&gt;мониторов&lt;/strong&gt; и &lt;strong&gt;транзакций&lt;/strong&gt;.&lt;br /&gt;
&lt;em&gt;Мониторы&lt;/em&gt; – специальные контролирующие структуры, через которые параллельные потоки получают доступ к общим данным.&lt;br /&gt;
&lt;em&gt;Транзакции&lt;/em&gt; – операции, при которых потоки выполняют обновление общих структур данных. Но в это время доступ других потоков к этим данным блокируется.&lt;br /&gt;
Эта парадигма очень популярна и реализована во всех массовых языках, например, Java и C#.&lt;/p&gt;

&lt;p&gt;В &lt;em&gt;параллелизме с обменом сообщениями&lt;/em&gt; потоки работают параллельно и обмениваются друг с другом &lt;strong&gt;сообщениями&lt;/strong&gt;. Процесс обмена может быть, как синхронным (отправитель ждет подтверждения от получателя), так и асинхронным (отправитель не ждет подтверждения от получателя).&lt;br /&gt;
Подобная схема поддерживается, например, в языке Erlang.&lt;/p&gt;

&lt;p&gt;На практике существуют несколько видов параллелизма:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Распределенная система&lt;/strong&gt;. Набор компьютеров, объединенных сетью (например, структура интернета). Тут каждая независимая параллельная активность – это отдельный компьютер.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Процессы&lt;/strong&gt;. Каждая независимая параллельная активность – это процесс. Используют независимые области памяти. ОС занимается связью прикладных программ, ресурсов, процессов и памяти. Например, обычной программе, как правило, выделяется один процесс, внутри которого она выполняется.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Потоки (нити)&lt;/strong&gt;. Каждая независимая параллельная активность – это поток (или нить) - &lt;em&gt;thread&lt;/em&gt;. Потоки выполняются независимо, однако используют общую область памяти. Например, закладки внутри браузера (активности внутри одной родительской программы, выполняющейся внутри одного процесса) обычно работают в разных потоках.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Таким образом, главное отличие процессов от потоков заключается в управлении ресурсами.&lt;/p&gt;

&lt;p&gt;Процессы – это &lt;em&gt;конкуренция&lt;/em&gt; (каждый процесс пытается захватить под себя ресурсы). 
Потоки - это &lt;em&gt;кооперация&lt;/em&gt; (Потоки внутри процесса, делят ресурсы и действуют совместно, для того чтобы процесс показал наилучший результат)&lt;/p&gt;

&lt;p&gt;Но давайте остановимся на понятии &lt;strong&gt;потока&lt;/strong&gt; более подробно.&lt;br /&gt;
В современном программировании часто требуется, чтобы программа содержала несколько самостоятельных активностей, каждая из которых выполняется в своём темпе. Между активностями не должно быть никаких взаимных помех. Они исполняются абсолютно независимо друг от друга, если только программист не решит каким-то явным и корректным образом организовать их взаимодействие.&lt;br /&gt;
Как я уже сказал, поток - это обычный последовательно выполняющийся код.&lt;br /&gt;
После введения концепции одновременной работы программе допускается поддерживать более чем один поток, каждый из которых работает одновременно с другими потоками, и в то же время полностью независим от других потоков.&lt;/p&gt;

&lt;p&gt;Ниже пример кода Python с использованием многопоточности (модуль &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;threading&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# создаем свой класс – наследник от класса Thread модуля threading
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# инициализация потока
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# переопределяем метод запуска потока
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s is running&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# создаем группу потоков
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Thread #&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;my_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;my_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;После запуска данного кода мы получим следующее:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#2 is running
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#3 is running
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#1 is running
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#4 is running
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#5 is running
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Причем, скорее всего, каждый раз потоки будут отработаны в случайном порядке. Почему так происходит? Потому что механизм распараллеливания выполняет код из соображений эффективности. Программисту при написании прикладного кода правильнее всего полагать, что все повторения тела цикла выполняются одновременно. Иначе возникают проблема, называемая обычно проблемой &lt;strong&gt;race conditions&lt;/strong&gt;.&lt;br /&gt;
Более детально о данной проблеме и из каких причин она вытекает мы поговорим в следующей части Вселенной программирования.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Ключевые концепции ч2 - Замыкания.</title>
   <link href="http://localhost:4000/2021/02/15/programming-universe5/"/>
   <updated>2021-02-15T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/02/15/programming universe5</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Серия тем о вселенной программирования продолжается. В предыдущей своей &lt;a href=&quot;https://optima740.github.io/2021/02/02/programming-universe4/&quot;&gt;статье&lt;/a&gt; я описывал основные концепции программирования - то, что является фундаментальной идейной базой, то, на чем основывается искусство программирования. Данные идеи практически реализованы в языках программирования в различных комбинациях.  И в той же статье рассказал об одной из четырех ключевых концепций - концепции именованного состояния.&lt;/p&gt;

&lt;p&gt;Итак, сегодня речь пойдет о еще одной базовой концептуальной вещи в программировании - замыкания, а если быть точнее, &lt;strong&gt;замыкания с лексической областью видимости (lexically scoped closure)&lt;/strong&gt;.
Это достаточно мощная концепция сама по себе. Например, функциональное программирование, по сути, и есть воплощение концепции замыкания. На данном этапе понятно словесно описать суть данной идеи достаточно тяжело, поэтому я для начала приведу пример кода с пояснениями.&lt;br /&gt;
Самой наглядной и популярной реализацией замыкания являются классические функции.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2021-02-15/pic1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main_func&lt;/code&gt;, которая возвращает &lt;code class=&quot;highlighter-rouge&quot;&gt;inner_func&lt;/code&gt;, которая обращается к локальной переменной &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;, определённой внутри &lt;code class=&quot;highlighter-rouge&quot;&gt;main_func&lt;/code&gt;.&lt;br /&gt;
Когда вызвана &lt;code class=&quot;highlighter-rouge&quot;&gt;main_func&lt;/code&gt;, она возвращает &lt;code class=&quot;highlighter-rouge&quot;&gt;inner_func&lt;/code&gt;, которая запоминается где-то во внешней переменной (например, &lt;code class=&quot;highlighter-rouge&quot;&gt;f = main_func()&lt;/code&gt;), после чего &lt;code class=&quot;highlighter-rouge&quot;&gt;main_func&lt;/code&gt; как бы прекращает своё существование.
Однако &lt;code class=&quot;highlighter-rouge&quot;&gt;inner_func&lt;/code&gt; , если её теперь вызывать через переменную &lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt;, должна использовать внутри себя переменную &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;, принадлежащую функции &lt;code class=&quot;highlighter-rouge&quot;&gt;main_func&lt;/code&gt;, которая уже не существует.&lt;/p&gt;

&lt;p&gt;Замыкание - это функция &lt;code class=&quot;highlighter-rouge&quot;&gt;inner_func&lt;/code&gt;, которая связана со своим контекстом выполнения. Она замкнула в себе определённую информацию из внешней среды в пределах своей области видимости, и, хотя &lt;code class=&quot;highlighter-rouge&quot;&gt;main_func&lt;/code&gt; формально не существует, &lt;code class=&quot;highlighter-rouge&quot;&gt;inner_func&lt;/code&gt; будет корректно использовать переменную &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;, локальную внутри конкретного экземпляра функции &lt;code class=&quot;highlighter-rouge&quot;&gt;inner_func&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Вот еще пример функции счетчика, реализованной при помощи замыкания:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;nonlocal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 1
# 2
# 3
# 4
# 5
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 1
# 2
# 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Каждый раз при вызове функции &lt;code class=&quot;highlighter-rouge&quot;&gt;counter()&lt;/code&gt;, она будет считать и запоминать кол-во своих вызовов. 
Если создать новый объект (при этом пространство имен обновится), то счетчик сбрасывается и считает заново.&lt;/p&gt;

&lt;p&gt;Ну а теперь попробую описать суть концепции более простыми словами.&lt;br /&gt;
Итак, &lt;strong&gt;замыкание&lt;/strong&gt; – это функция, связанная со своим контекстом выполнения использованием пространства имен. Главная идея тут заключается в разделении определения программной логики от ее исполнения через создание функций, которые возвращают своим результатом другие функции со своим контекстом. Другими словами, программа может взять некоторые инструкции кода в одном месте в виде отложенного “пакета работы”, передать их в другое место, и исполнить уже там. Причём результат выполнения пакета в новом месте программы будет точно таким же, как если бы этот пакет выполнялся там, где замыкание было исходно создано.&lt;/p&gt;

&lt;p&gt;Кроме того, объекты и другие программные компоненты, хранящие внутри себя нужные состояния (или ссылки на них) – это также является замыканиями. Например, в ООП класс – это, по сути, функция, которая при своем вызове (через конструктор) возвращает объект – это тоже замыкание.&lt;br /&gt;
Таким образом, мы видим в концепции замыкания общую ключевую конструкцию для различных парадигм программирования, таких как функциональное, императивное и объектно-ориентированное. В большинстве языков программирования замыкания скрыты внутри имплементации языка и не доступны программисту напрямую.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Ключевые концепции ч1.</title>
   <link href="http://localhost:4000/2021/02/02/programming-universe4/"/>
   <updated>2021-02-02T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/02/02/programming universe4</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Продолжая серию тем о вселенной программирования, в данной статье я хотел бы поделиться своими мыслями после изученной информации, об основных (ключевых) концепциях в программировании. Ранее я уже говорил о глобальных вещах в программистской вселенной, таких как:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://optima740.github.io/2020/12/25/programming-universe1/&quot;&gt;Статья 1&lt;/a&gt;. Макро и микро подход к задачам программирования, понятия детерминизма и парадигм программирования.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://optima740.github.io/2021/01/10/programming-universe2/&quot;&gt;Статья 2&lt;/a&gt;. Подход к проектированию программных систем, исходя из глобального взгляда через призму парадигм. Необходимость выделения главных задач, для решения которых подбирается применение наиболее подходящих парадигм программирования способных эти задачи решить и, соответственно, получения набора конкретных языков и фреймворков.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://optima740.github.io/2021/01/26/programming-universe3/&quot;&gt;Статья 3&lt;/a&gt;. Основные вычислительные модели и их главные характеристики, на которых основываются парадигмы программирования и конкретные языки, представляющие данные парадигмы.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В сегодняшней статье мы опускаемся на слой ниже, и поговорим уже о конкретных концепциях в программировании, а точнее, главных (ключевых) идеях, на которых и держится искусство программирования, как понятность, корректность и прозрачность кода.&lt;/p&gt;

&lt;p&gt;Итак, ключевые концепции программирования комбинации которых и входят в состав различных парадигм:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Именованные состояния.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Замыкания.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Параллелизм.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Абстракция данных.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Именованное состояние&lt;/strong&gt; – данное состояние вводит понятие абстрактного времени в парадигму. Это объекты, к которым можно обращаться по имени (имеют связь между именем объекта и адресом в памяти), способные менять свое состояние (значение) во время исполнения программы.&lt;br /&gt;
Конечно же, ярким примером данной концепции является &lt;strong&gt;переменная&lt;/strong&gt; в императивной парадигме. &lt;em&gt;Переменная&lt;/em&gt; характеризуется последовательностью принимаемых значений в процессе работы кода, и своим уникальным именем. Противоположное именованному состоянию по семантике понятие – не именованное состояние (монады).&lt;br /&gt;
На примере изучаемого мной Питона (императивная парадигма) и его ссылочной модели данных, под капотом переменной мы имеем имя ссылки, которая уникальна для своей области видимости в пространстве имен. Ссылка указывает на область в динамической памяти, где хранится непосредственно сам объект, к которому мы можем обратиться по имени ссылки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2021-02-02/Pic1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для именованного состояния характерен недетерминизм, потому что изменение значений в процессе времени уже подразумевает некую степень хаотичности системы и непредсказуемость ее поведения.
Именно поэтому для детерминированного характера функциональной парадигмы, определения именованного состояния не существует, т.к. в данной парадигме нет понятия времени. Есть лишь функции (как в математике), которые возвращают один и тот же результат без побочных эффектов. Но для систем, описывающих поведение реального мира, в котором многие вещи подвержены изменениям с течением времени, без именованных состояний не обойтись. Более того, в реальном мире одни и те же объекты при одинаковых воздействиях, могут выдавать различные результаты. Это называется побочными эффектами, характерными для недетерминированной системы.&lt;/p&gt;

&lt;p&gt;Именованные состояния полезны и при организации модульности. Модульность системы говорит о том, что в случае необходимости изменения системы, мы имеем возможность модифицировать отдельную ее часть (модуль) без модификации системы целиком. Организовывая программу в виде модулей с применением концепции именованных состояний, мы имеем плюс в плане удобства и выразительности. Однако главный недостаток этого подхода в том, что система сразу становится непредсказуемой (функциональные блоки системы имеют побочные эффекты при работе программы), и обычно код таких систем начинает запутываться и усложняться.&lt;/p&gt;

&lt;p&gt;Таком образом получается, (как я уже говорил в предыдущей статье) что парадигма с поддержкой именованного состояния является более выразительной для описания процессов реального мира, но в тоже время и более непредсказуемой (носит недетерминированный характер, не всегда корректна).&lt;br /&gt;
Возможен некий компромиссный подход к использованию именованных состояний - инкапсулировать именованные состояния в системе в виде классов как абстрактных типов данных. В таком случае каждый АТД задаёт конкретную структуру данных с формальным набором операций над ней, корректность которого доказывать уже проще.&lt;br /&gt;
Но об абстракции данных мы поговорим отдельно в следующих статьях.&lt;/p&gt;

&lt;p&gt;Кроме того, в данную концепцию можно добавить такое понятие как &lt;strong&gt;именованные записи&lt;/strong&gt; (&lt;strong&gt;record&lt;/strong&gt;). Сюда мы можем отнести структуры данных (массивы, списки, деревья, хэш-таблицы и тд), в общем это все сущности, имеющие набор ссылок на условные элементы с индексированным доступом к каждому элементу. Класс без методов, в котором есть только общедоступные поля, к которым имеется доступ по имени, также является именованной записью.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Вычислительные модели – основные характеристики.</title>
   <link href="http://localhost:4000/2021/01/26/programming-universe3/"/>
   <updated>2021-01-26T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/01/26/programming universe3</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В предыдущих моих постах из данной серии (&lt;a href=&quot;https://optima740.github.io/2020/12/25/programming-universe1/&quot;&gt;раз&lt;/a&gt; и &lt;a href=&quot;https://optima740.github.io/2021/01/10/programming-universe2/&quot;&gt;два&lt;/a&gt;), я писал о том, что глобально вселенную программирования можно разделить на микро и макро подмножества – &lt;strong&gt;programming in small&lt;/strong&gt; и &lt;strong&gt;programming in large&lt;/strong&gt; (ну как с экономикой). Следовательно, и круг решаемых задач разный. И вот, для того, чтобы правильно проектировать программные системы, необходимо четко выделять задачи, которые необходимо решить при помощи тех или иных наборов концепций программирования - &lt;strong&gt;парадигм программирования&lt;/strong&gt;, которые уже и представляют нам конкретные языки программирования и фреймворки.&lt;/p&gt;

&lt;p&gt;В данной статье я и хотел бы затронуть тему &lt;em&gt;вычислительных моделей&lt;/em&gt;, которые служат основой для различных парадигм программирования. Затронуть абстрактно, исходя из той информации, которую мне удалось изучить в этом направлении.&lt;/p&gt;

&lt;p&gt;Итак, &lt;strong&gt;вычислительная модель&lt;/strong&gt; (применительно к информатике) – это набор доказанной математической теории, некий опорный вычислительный аппарат, на котором основываются те концепции, которые объединяет парадигма программирования. Например, лямбда-исчисления Алонзо Черча является математическим аппаратом - фундаментом для парадигмы функционального программирования.&lt;/p&gt;

&lt;p&gt;Для любой парадигмы можно выделить две важнейшие ключевые характеристики:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Степень недетерминизма&lt;/strong&gt; (насколько он явный).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Способность хранить значения&lt;/strong&gt; (именованное состояние).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Недетерминизм считается явным или наблюдаемым&lt;/strong&gt;, если мы явно видим различные результаты выполнения программы, которая имеет каждый раз одни и те же внутренние параметры при запуске. Такой характер поведения присущ, в первую очередь, для параллельного программирования (параллелизма) со свойственной ему проблемой конкуренции потоков (&lt;em&gt;race condition&lt;/em&gt;): когда несколько частей кода могут выполняться одновременно, и нельзя по исходному тексту программы однозначно сказать, каким будет итог их работы. Потому что несколько потоков пытаются одновременно изменить состояние некоторого общего объекта, и результат зависит от промежутков времени между работой разных частей кода. Какой поток отработает последним, тот и зафиксирует итоговое состояние общего объекта. Но не всегда данный характер является крайне нежелательным, например, при моделировании систем реального мира, как раз требуется подобная парадигма с присущим явным недетерминизмом.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Способность хранить значения&lt;/strong&gt; (именованное состояние) – это возможность сохранять последовательность значений на протяжении хода выполнения программы. В императивной парадигме это переменные. В данной характеристике важна степень выраженности именованного состояния (&lt;strong&gt;stateless&lt;/strong&gt; - &lt;strong&gt;stateful&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Итак, если попытаться представить основные направления вычислительных моделей, и, как следствие, парадигм программирования, то мы получим некое дерево.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-26/pic1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ядро всей программистской концепции, некие глубинные принципы всего – это &lt;strong&gt;декларативная вычислительная модель&lt;/strong&gt; (декларативное программирование).  Если очень поверхностно описать суть, то это &lt;em&gt;stateless&lt;/em&gt;-программирование, где не используются переменные для хранения промежуточных состояний программы, которые могут меняться с течением времени исполнения кода и, соответственно, степень именованного состояния наименее выражена. Явный представитель декларативной модели – парадигмы &lt;em&gt;функционального&lt;/em&gt; и &lt;em&gt;логического программирования&lt;/em&gt;. Я уже писал пару постов на тему функционального программирования более подробно (&lt;a href=&quot;https://optima740.github.io/2020/07/04/Functional-programming/&quot;&gt;раз&lt;/a&gt; и &lt;a href=&quot;https://optima740.github.io/2020/07/28/FP-base-structs/&quot;&gt;два&lt;/a&gt;). В концепции функционального программирования мы последовательно вызываем чистые функции, подавая им на вход неизменяемые значения. Данная модель имеет явный детерминистический характер, и может быть использована для создания распределенных безопасных программных систем устойчивых к сбоям. Кроме того, данной модели свойственна &lt;em&gt;параллельность&lt;/em&gt; (использование многопоточности – об этом отдельно поговорим позже). А значит это явная возможность эффективно использовать многоядерность современных процессоров, не упираясь в проблемы конкуренции параллельных потоков (&lt;em&gt;race condition&lt;/em&gt;).&lt;br /&gt;
От данной вычислительной модели, как от корня вниз уже могут исходить ветви направлений.&lt;br /&gt;
Например, &lt;strong&gt;недетерминированная последовательная модель&lt;/strong&gt; с более выраженной степенью именованного состояния (&lt;em&gt;stateful&lt;/em&gt;), без параллелизма. Добавление именованного состояния даёт нам классическое императивное программирование: функции и переменные.&lt;br /&gt;
Другая ветвь - &lt;strong&gt;параллельная детерминированная модель&lt;/strong&gt;, с неименованными состояниями (&lt;em&gt;stateless&lt;/em&gt;), где добавление параллельности приводит к парадигме параллельного логического программирования.&lt;/p&gt;

&lt;p&gt;Данная схема всего лишь абстрактное представление основных направлений, в терминах которых и описаны те или иные парадигмы, представителями которых являются уже конкретные языки программирования, как имплементации определенных наборов концепций.&lt;/p&gt;

&lt;p&gt;Что же в итоге нам все это дает в реальности? А то, что искусство проектирования программных систем – это умение выбирать парадигму с оптимальным множеством концепций, точнее всего подходящим конкретному проекту. Если концепций, которые помогут достичь цели проекта, будет слишком мало, то усложнится реализация системы – мы приходим к задачам &lt;em&gt;programming in small&lt;/em&gt;. Если таких концепций будет слишком много, то сложным станет её проектирование, -это уже круг задач &lt;em&gt;programming in large&lt;/em&gt;.&lt;br /&gt;
Недетерминизм важен во всех программных системах, где взаимодействие происходит в реальном времени (например, клиент-серверные системы).&lt;br /&gt;
Именованные состояния важны для обеспечения модульности проекта.&lt;br /&gt;
&lt;strong&gt;Явный недетерминизм&lt;/strong&gt; и &lt;strong&gt;именованные состояния&lt;/strong&gt; - две крайние ситуации, между которыми важно уметь находить баланс при проектировании.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Глобальный взгляд на проектирование.</title>
   <link href="http://localhost:4000/2021/01/10/programming-universe2/"/>
   <updated>2021-01-10T00:00:00+03:00</updated>
   <id>http://localhost:4000/2021/01/10/programming universe2</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Любая программная система характеризуется двумя ключевыми характеристиками:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Сложность.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Хаотичность.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Сложность&lt;/em&gt; определяется количеством базовых сущностей и связей между ними в системе (например, классы в проекте). Соответственно, чем их меньше, тем проще проект.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Хаотичность&lt;/em&gt; говорит нам о том, насколько не детерминирована (вспоминаем &lt;a href=&quot;http://127.0.0.1:4000/2020/12/25/programming-universe1/&quot;&gt;первую статью&lt;/a&gt; данного цикла :) система в целом. Насколько она непредсказуема, если говорить иначе.&lt;/p&gt;

&lt;p&gt;Каждый язык программирования создавался для решения определенной сферы задач. Но для любого множества задач можно найти такую парадигму программирования, в которой эти задачи будут решаться продуктивнее и эффективнее. Однако, стоит помнить, что не существует универсальной парадигмы для решения всех классов задач.&lt;br /&gt;
При проектировании программной системы, выбор парадигмы является выбором той математической системы или системы логических принципов, содержащей концепции программирования, которые более точно охватили бы тот круг задач, который необходимо решить. В крупных проектах возможны применения нескольких парадигм, каждая из которых решала бы поставленные задачи на своем уровне (слое).&lt;br /&gt;
Например, &lt;strong&gt;объектно-ориентированное программирование&lt;/strong&gt; лучше всего подходит для создания систем, где подразумевается большое число взаимосвязанных абстракций данных, организованных в иерархии. &lt;br /&gt;
&lt;strong&gt;Логическое программирование&lt;/strong&gt; лучше всего подходит для анализа и преобразования сложных символических структур в соответствии с наборами логических правил.  &lt;br /&gt;
&lt;strong&gt;Дискретное синхронное программирование&lt;/strong&gt; лучше всего подходит для “реактивных” задач, когда в системе постоянно происходят реакции на последовательности внешних событий, которые (реакции) после некоторых вычислений генерируют выходные события.  &lt;br /&gt;
Популярное сегодня &lt;strong&gt;функционального реактивного программирования&lt;/strong&gt; отличается от &lt;strong&gt;FRP&lt;/strong&gt; тем, что тут “время” в системе прерывно (шаг времени – это, как правило, произвольный период между двумя входными событиями), в отличие от &lt;strong&gt;FRP&lt;/strong&gt;, где время непрерывно. По этой причине &lt;strong&gt;FRP&lt;/strong&gt; также называют &lt;strong&gt;непрерывным синхронным программированием&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Большие и сложные системы, подсистемы которых практически всегда реализуются в разных парадигмах (например, классическая система, состоящая из базы данных, бизнес-логики, сетевого движка и клиентской части), могут быть представлены в виде таких слоёв, как, например, реляционно-логическое программирование, последовательное и параллельное ООП, функциональное реактивное программирование. Уже исходя из такой архитектуры, можно сознательно подбирать наиболее подходящие фреймворки, отбирая их по формальным критериям совместимости фундаментальных концепций, и получить существенный выигрыш в сравнении с несознательным механическим выбором популярного стека.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2021-01-10/pic1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Многие языки программирования поддерживают несколько парадигм, которые можно разделить на две группы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Парадигмы, поддерживающие &lt;strong&gt;programming in small&lt;/strong&gt;. Непосредственное кодирование для класса задач, наиболее часто решаемых данным языком.&lt;/li&gt;
  &lt;li&gt;Парадигмы, поддерживающие &lt;strong&gt;programming in large&lt;/strong&gt;. Проектирование и создание больших программных систем с поддержкой абстракции и модульности.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Таким образом, мы видим, что при правильном проектировании сложных программных систем и проектов, конкретные задачи лучше всего выделять более выразительно, чтобы можно было подобрать более продуктивные языки и фреймворки, точно отвечающие наиболее подходящей парадигме для решения выделенного класса задач. И в результате, получить выигрыш в трудоёмкости в сотни, а то и тысячи раз. Но для этого надо научиться правильно смотреть на слои архитектуры по-научному - глобально, через спектр всех доступных парадигм программирования.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Вселенная программирования. Введение.</title>
   <link href="http://localhost:4000/2020/12/25/programming-universe1/"/>
   <updated>2020-12-25T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/12/25/programming universe1</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-12-25/1.png&quot; alt=&quot;&quot; /&gt;
Данной своей статьей я хотел бы начать раскрывать серию тем связанных с глобальным (стратегическим) пониманием вселенной программирования.&lt;/p&gt;

&lt;p&gt;На сегодняшний день, конкуренция и требования в области программирования растут с каждым днем. Количество знаний необходимых технологий и фреймворков для того, чтобы ты мало-мальски подходил под критерии младшего помощника разработчика, только увеличивается. Это, своего рода, вечная гонка изученной информации и опыта длиною в жизнь. И я с этим не спорю и считаю, что так и должно быть в развитии каждого хорошего специалиста – не важно программист ты, врач или электрик.&lt;br /&gt;
Тенденции современного рынка труда в сфере разработки, в большинстве своем, диктуют нам необходимость иметь узко направленные хорошие знания конкретного стека (а иногда даже и одного фреймворка). Да, знание определенного стека, состоящего из различных фреймворков и технологий, - это очень хорошо! Но, что насчет глобального взгляда на программистскую сферу с точки зрения информатики (computer science), возможно местами даже немного абстрактного?&lt;/p&gt;

&lt;p&gt;В одной из своих первых &lt;a href=&quot;https://optima740.github.io/2020/02/17/go-to-stage-down/&quot;&gt;статей&lt;/a&gt;, мы уже отправлялись в «машинное отделение» и рассматривали в упрощенном виде, как происходят процессы выполнения кода на самом низшем – машинном уровне.  Сегодня (и в данной серии статей «Вселенная программирования») я предлагаю, наоборот, возвыситься и посмотреть свысока на всю систему понимания программирования глобально.&lt;br /&gt;
Я имею ввиду понимание программирования, как целостной системы programming in small и programming in large через парадигмы и концепции программирования, применимые к разработке и проектированию программных систем. После не малого времени потраченного на изучение программирования, именно в академическом (классическом) стиле, у меня и появилась идея написать ряд статей, посвященных этому. Конечно же вся представленная информация, это некая упрощенная для понимания система, которую я смог выстроить определенным образом при изучении данной темы.&lt;/p&gt;

&lt;p&gt;Итак, глобально целостную систему понимания программирования можно разделить на два подхода в написании и проектировании кода (или две глобальные сферы, например, как микро и макро экономика, каждая из которых решает свой класс задач):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Programming in small.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Programming in large.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Programming in small&lt;/strong&gt; (программирование в малом) – это концепция, которая охватывает создание небольших программ или кодирование эффективных алгоритмов, удовлетворяющих определенной асимптотики сложности (исполнение за полиномиальное время - сложность их ниже, чем O(n^x)). В разработке задействован один программист или небольшая группа. Например, классические соревнования по олимпиадному программированию – это типичный programming in small.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming in large&lt;/strong&gt; (программирование больших проектов) – это подход к разработке и проектированию структур данных, сложных масштабируемых проектов с использованием абстракции и модульности, их дальнейшая поддержка и модернизация. Делается большой упор на планирование и создание качественной документации. Задействованы большие группы разработчиков, или целые отделы.&lt;/p&gt;

&lt;p&gt;Для того, чтобы разработать проект или реализовать какую-либо задачу в программировании, необходимо иметь понимание, какая парадигма программирования (а возможно и не одна) лучше всего подойдет под решение поставленной задачи.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Парадигма программирования&lt;/strong&gt; – подход к программированию, основанный на математической теории или на логически формализованном множестве принципов. Каждая &lt;strong&gt;парадигма содержит набор концепций программирования&lt;/strong&gt;, которые подходят для решения определенного класса задач и проектов.&lt;br /&gt;
В реальном мире на практике, самый популярный случай использования различных парадигм это 95% императивного программирования + ООП. Но встречаются и другие случаи, например, функциональное + ООП.&lt;br /&gt;
Для построения сложной системы необходимо иметь в арсенале множество парадигм для хорошей ясной и продуктивной реализации всех ее подсистем. Вот наиболее популярные языки программирования представляющие различные парадигмы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Императивное + ООП&lt;/strong&gt; - Java, C++, C#, Python.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Дискретное синхронное программирование&lt;/strong&gt; - Esterel, Lustre, Argos, Signal.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Логическое программирование&lt;/strong&gt; - Prolog, Planner.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Функциональное программирование&lt;/strong&gt; - Haskell, F#, LISP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Также существуют языки, которые поддерживают в себе сразу несколько парадигм, например, языки Oz, Julia, Kotlin, а также всеми любимый C++. 
Но даже если выбранный язык не поддерживает ту или иную парадигму, ее можно попытаться сэмулировать. Например, на языке C можно программировать в ООП-стиле.&lt;/p&gt;

&lt;p&gt;И еще хотел добавить два довольно абстрактных, но, на мой взгляд, крайне важных определения, которые нам помогут в дальнейшем:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Детерминизм&lt;/strong&gt; – предсказуемость системы. Четкая последовательность действий, ведущих к ожидаемому результату. Нет свободы, нет хаоса в системе. Например, работа механических часов. &lt;br /&gt;
&lt;strong&gt;Недетерминизм&lt;/strong&gt; – непредсказуемость системы. Хаотичность, полная свобода в поведении системы. Результат непредсказуем. Например, хаотичное движение молекул газа.&lt;/p&gt;

&lt;p&gt;Нахождение правильного баланса между этими состояниями является одной из ключевых задач при разработке крупных проектов и систем.&lt;/p&gt;

&lt;p&gt;Таким образом, становится очевидным тот момент, что прежде чем затачиваться под определенный язык программирования (не говоря уже о конкретном фреймворке), необходимо, хотя бы образно, представлять ту глобальную систему концепций из computer science, согласно которой и исходя из круга поставленных задач, мы уже и приходим к выбору использования того или иного стека технологий в рамках работы над конкретным проектом.&lt;br /&gt;
Приведу следующую аналогию. На мой взгляд, если ты хочешь стать, например, хорошим автомехаником-мотористом, то несовсем правильно начинать учиться с того, как быстро и качественно крутить гайки, на глаз определять диаметр резьб, и учиться делать это только с определенной маркой автомобилей, приэтом, совершенно не понимая и не зная тенденций мирового автопрома, теории и развития ДВС и других сопутствующих знаний, например, электронной диагностики.  Но, вот если, ты представляешь, как устроен мировой автопром, хорошо знаком с теорией строения ДВС, понимаешь, как работает электронная система управления двигателем, то научиться откручивать и закручивать гайки в правильном порядке на конкретном моторе, зная за что отвечает и как устроена каждая его подсистема, думаю, не составит труда. Да, с точки зрения тактики бизнеса по авто-ремонту и быстрого зарабатывания денег, вполне подойдет (и даже будет предпочтительнее) первый вариант. Но, если развиваться как хороший специалист стратегически, всегда иметь спрос на свои услуги и быть всегда востребованным, то необходимо развивать репутацию грамотного квалифицированного спеца, который понимает свое дело, в первую очередь, глобально.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Императивное программирование. Вызов функций ч2.</title>
   <link href="http://localhost:4000/2020/11/15/imperativ_programm_function-call2/"/>
   <updated>2020-11-15T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/11/15/imperativ_programm_function call2</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-15/logo.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В предыдущей своей статье я затронул общую упрощенную механику, на основе изученного мной материала, вызова функций и нитей исполнения кода. Но вскоре, идея раскрыть тему функций более подробно, все же заставила меня написать вторую часть статьи, в которой я попытаюсь глубже описать процессы происходящие при вызове и исполнении функции, на примере изучаемого мной языка Python.&lt;/p&gt;

&lt;p&gt;Питон – язык, использующий интерпретатор (в самом распространенном случае это CPython, реализованный на C). Вообще, тема трансляторов - это отдельная тема для изучения и освещения, в данной статье я затрону ее очень поверхностно, ровно для понимания темы текущего поста. Итак, существуют два вида трансляторов – это &lt;em&gt;компилятор&lt;/em&gt; и &lt;em&gt;интерпретатор&lt;/em&gt;.&lt;br /&gt;
Как работает компилятор я уже описывал в одной из своих первых &lt;a href=&quot;https://optima740.github.io/2020/02/17/go-to-stage-down/&quot;&gt;статей&lt;/a&gt;.&lt;br /&gt;
Интерпретатор, в отличие от компилятора (он переводит исходный код сразу в машинный), переводит исходный код сначала в промежуточный байт-код, который выполняется в, так называемой, виртуальной машине и, соответственно, не привязан к конкретной платформе. Эта самая виртуальная машина, в случае с Питоном, имеет стековый тип (бывают еще регистровые виртуальные машины).&lt;br /&gt;
Выполняя промежуточный байт-код, в который интерпретатор перевел исходный код, интерпретатор работает со стеком.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Создание функции&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-15/pic1.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
По порядку сверху вниз в байт-коде выполняются операторы.&lt;br /&gt;
LOAD_CONST - загружает в стек &lt;code class=&quot;highlighter-rouge&quot;&gt;code object&lt;/code&gt; с адресом нашей функции (по сути это объект - в питоне все есть объект).&lt;br /&gt;
Далее MAKE_FUNCTION создает из &lt;code class=&quot;highlighter-rouge&quot;&gt;code object&lt;/code&gt; функцию и возвращает ее обратно в стек.&lt;br /&gt;
STORE_NAME - связывает полученную функцию с ее именем &lt;code class=&quot;highlighter-rouge&quot;&gt;my_sum&lt;/code&gt;, для доступа к ней.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Вызов функции&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Далее в байт-код преобразуется строчка исходного кода:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result = 100 + my_sum(20, 30).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Рассмотрим правую часть выражения. Первым аргументом бинарного оператора сложения (BINARY_ADD) является константа &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;. Вторым оператором является функция &lt;code class=&quot;highlighter-rouge&quot;&gt;my_sum&lt;/code&gt; со своими фактическими параметрами &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-15/pic1-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
LOAD_CONST - загружает константу со значением &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt; в стек.&lt;br /&gt;
Далее, LOAD_NAME - загружает нашу функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;my_sum&lt;/code&gt; (точнее ее адрес в памяти, который связан с ее именем ссылкой).&lt;br /&gt;
LOAD_CONST – загружает аргументы функции (константы &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt;). Т.к. структура «стек» имеет схему доступа, работающую по принципу &lt;strong&gt;LIFO&lt;/strong&gt; (&lt;strong&gt;last in — first out&lt;/strong&gt;, «последним вошел — первым вышел»), то на верхушке стека оказывается последний загруженный элемент, а именно второй аргумент функции – число &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt;.&lt;br /&gt;
CALL_FUNCTION [2] – Происходит вызов функции с двумя аргументами. После чего создается еще один новый пустой стек (на рисунке &lt;strong&gt;стек-2&lt;/strong&gt;) для выполнения функции.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Выполнение функции&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;В &lt;strong&gt;стек-2&lt;/strong&gt; (стек выполнения функции &lt;code class=&quot;highlighter-rouge&quot;&gt;my_sum&lt;/code&gt;) передаются 2 аргумента из нашего &lt;strong&gt;стек-1&lt;/strong&gt; – это константы &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-15/pic2.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
В байт-коде:&lt;/p&gt;

&lt;p&gt;LOAD_FAST [‘a’] – передает значение аргумента &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;br /&gt;
LOAD_FAST [‘b’] – передает значение аргумента &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;br /&gt;
Бинарный оператор сложения – BINARY_ADD производит сложения переменных &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;br /&gt;
Результат работы функции возвращается оператором RETURN_VALUE.&lt;br /&gt;
Таким образом, на место вызова функции &lt;code class=&quot;highlighter-rouge&quot;&gt;my_sum&lt;/code&gt; в &lt;strong&gt;стек-1&lt;/strong&gt; (по адресу возврата) вернется значение &lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt;. После чего функция завершает свою работу, все ее локальные переменные будут удалены из памяти сборщиком мусора - Garbage Collector (это также тема для отдельной статьи:)&lt;br /&gt;
Далее, у нас следует (по исходному коду) оператор сложения константы &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt; - результата выполнения нашей функции.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-15/pic3.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Аналогичным образом выполняется BINARY_ADD с 2 аргументами &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt;, и результат выполнения связывается ссылкой с именем переменной &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; - выполняется оператор присваивания. Таким образом, переменная &lt;code class=&quot;highlighter-rouge&quot;&gt;result = 150&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Данный пример более наглядно и реалистично показывает механику вызова функций на примере Python.&lt;br /&gt;
Вообще, я считаю, что понятие функции (как подпрограммы) в программировании, носит фундаментальный характер. Ведь, если абстрактно взглянуть на программирование, то мы увидим, что &lt;strong&gt;объект&lt;/strong&gt; это, ничто иное, как функция с внутренним состоянием (памятью). &lt;strong&gt;Класс&lt;/strong&gt; – это генератор объектов, по сути, тоже функция, которая возвращает как результат - объект (который так же является функцией), у каждого такого объекта своя изолированная память – &lt;strong&gt;инкапсуляция&lt;/strong&gt;. Ну и если сюда добавить концепцию &lt;strong&gt;наследования&lt;/strong&gt;, то мы получаем &lt;strong&gt;ООП&lt;/strong&gt; :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Императивное программирование. Вызов функций, нити исполнения кода.</title>
   <link href="http://localhost:4000/2020/11/11/imperativ_programm_function-call/"/>
   <updated>2020-11-11T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/11/11/imperativ_programm_function call</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-11/logo.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В данной статье я хотел бы рассмотреть процесс вызова подпрограмм (функций) в императивной парадигме программирования, на примере изучаемого мной Питона. 
А также немного затронуть основную суть синхронного (классического) и асинхронного вызова функций.&lt;/p&gt;

&lt;p&gt;В 1946 г Джон фон Нейман, Герман Голдстайн и Артур Беркс в своей совместной статье изложили принципы построения и функционирования ЭВМ. Впоследствии на основе этих принципов производились первые два поколения компьютеров. 
В более поздних поколениях происходили некоторые изменения, хотя принципы Неймана актуальны и сегодня.&lt;br /&gt;
По одному из указанных принципов фон Неймана программа состоит из набора команд, которые выполняются процессором друг за другом в определенной последовательности. Выполнение инструкций (или программного кода) применительно к императивной парадигме программирования происходит последовательно или сверху вниз по мере чтения кода. 
Имея в своем арсенале такие элементарные конструкции как переменные, ветвления и циклы можно запрограммировать (описать на языке программирования) практически любую задачу.&lt;/p&gt;

&lt;p&gt;В ходе написания программы мы неизбежно сталкиваемся с ситуацией многократного повторного использования одного и того же кода. Эти повторяющиеся участки программного кода, согласно принципу &lt;strong&gt;DRY&lt;/strong&gt; - Don’t repeat yourself (не повторяй себя), принято локализовать и выделять в отдельные подпрограммы (или функции).&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим процесс вызова функций из главной программы. Как я уже ранее отмечал в своей &lt;a href=&quot;https://optima740.github.io/2020/02/17/go-to-stage-down/&quot;&gt;статье&lt;/a&gt; , при запуске программы, операционная система генерирует процесс. Процесс, в свою очередь, получает свой собственный набор (пространство) адресов памяти. Это такой способ разграничить ресурсы одной программы от другой, чтобы избежать использование памяти одного процесса другим: все адреса памяти, к которым процесс может обращаться принадлежат только ему.&lt;/p&gt;

&lt;p&gt;Пространство памяти внутри процесса, если описать очень упрощенно, делится на несколько сегментов:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Сегмент данных (обрабатываемых значений).&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Сегмент команд (кода).&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Стек вызова.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Сегмент данных - это динамическая память (куча - heap), в которой содержатся данные (объекты) для вычисления в коде.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-11/steck.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На схеме выше, я постарался отобразить ход выполнения программы, в которой используется вызов функций. Весь исполняемый код располагается в сегменте команд. 
При выполнении главной программы &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__main__&lt;/code&gt;&lt;/strong&gt; интерпретатор языка доходит до точки вызова функции &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt;, после чего, в стек вызова заносится адрес возврата. Это та точка в основной программе, куда будет возвращено управление после выполнения функции &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt; посредствам оператора &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/strong&gt;. Формально, если коснуться более низкого уровня – ассемблера, после выполнения любой функции происходит вызов инструкции &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RET&lt;/code&gt;&lt;/strong&gt;, которая уже использует стек с адресами возврата для передачи управления обратно в точку первоначального вызова. Точно также происходит и в случае еще одной вложенной функции &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bar()&lt;/code&gt;&lt;/strong&gt;. После ее вызова в стек добавляется адрес возврата в функцию &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt;. И, как только выполнится &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bar()&lt;/code&gt;&lt;/strong&gt;, ее &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/strong&gt; вернет ход программы в &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt;, используя адрес возврата из стека. А затем, после выполнения &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt;, вытащит из стека самый нижний элемент – адрес возврата в &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__main__&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;И вот тут мы плавно подошли к теме нитей выполнения. Дело в том, что во время выполнения всех вложенных функций главная программа &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__main__&lt;/code&gt;&lt;/strong&gt; , как-бы, ожидает пока выполнится &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt;. А &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt;, в свою очередь, ожидает выполнения &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bar()&lt;/code&gt;&lt;/strong&gt;. Такая модель вызовов функций называется синхронными вызовами (или классическими вызовами).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-11/sinchronic.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Существует еще одна модель выполнения кода – асинхронная. В этом случае вызванная функция выполняется параллельно основной программе. Но, в таком случае, сразу встает вопрос о том, в какой момент, и в какую точку необходимо вернуть значение вызванной функции &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt; в параллельно выполняющуюся &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__main__&lt;/code&gt;&lt;/strong&gt;. И что делать, если &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;/strong&gt; выполнилась раньше или позже от ожидаемого момента в основной программе.&lt;br /&gt;
Но асинхронная модель потому и названа таковой, что обе нити периодически обмениваются состоянием своего выполнения. И одна из нитей имеет возможность подстроиться под ход выполнения другой, ожидая ее в нужных моментах.&lt;br /&gt;
На схеме ниже я постарался привести такой пример выполнения.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-11-11/asinchronic.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Таким образом, я постарался наглядно описать (пусть и в очень упрощенной форме), ту механику, которая происходит при вызове функций, или в классическом понимании – подпрограмм.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/c/%D0%A2%D0%B8%D0%BC%D0%BE%D1%84%D0%B5%D0%B9%D0%A5%D0%B8%D1%80%D1%8C%D1%8F%D0%BD%D0%BE%D0%B2/featured&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;В статье использовались материалы из курса лекций преподавателя кафедры информатики МФТИ Тимофея Хирьянова.&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Питонячий Телеграм-Бот, Yandex-API и диплой на Heroku.</title>
   <link href="http://localhost:4000/2020/09/18/TG-bot-heroku-deploy/"/>
   <updated>2020-09-18T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/09/18/TG-bot-heroku-deploy</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-09-18/logo.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На сегодняшний день, наверное, только ленивый не писал и не делал обзорных статей с инструкциями как запилить собственного телеграм-бота. Это уже такой своеобразный мейнстрим на сегодня, особенно среди питонистов.&lt;br /&gt;
В данном посте я хотел бы затронуть не столько процесс написания самого бота, сколько описать в целом процесс интеграции кода на питоне с телеграм-сервисом, сторонним API по геокодированию от Yandex и развертыванию этого всего на удаленном бесплатном хостинге Heroku.&lt;/p&gt;

&lt;p&gt;Итак, попалось мне как-то одно тестовое задание, где требовалось написать телеграм-бота с возможностью обрабатывать запросы пользователя в виде текста с частичным упоминанием географических адресов. В ответ пользователь должен получить полный структурированный адрес географического объекта. На этом задание конечно не исчерпывалось, но остальное я опишу возможно в другой раз :)&lt;/p&gt;

&lt;p&gt;Чтобы написать бота, я использовал питонячую библиотеку &lt;a href=&quot;https://github.com/python-telegram-bot/python-telegram-bot&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python-telegram-bot&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. Там все достаточно понятно. Есть официальная документация и масса примеров в сети. Если коротко описать процесс создания самого бота, то для этого необходимо:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Создать и зарегистрировать своего бота.&lt;br /&gt;
Для этого в сервисе телеграм необходимо отправить Боту-Отцу (&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@BotFather&lt;/code&gt;&lt;/strong&gt;) команду &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/newbot&lt;/code&gt;&lt;/strong&gt;.&lt;br /&gt;
Дать боту имя (name) и имя пользователя (username).&lt;br /&gt;
В ответ Папа-Бот вышлет уникальный API-ключ (TOKEN) для вашего бота. Данный ключ является идентификатором для доступа и управления ботом. Его нужно сохранить и держать в тайне, иначе бота могут угнать! (Не размещать в коде в публичном доступе на открытых ресурсах, например).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-09-18/bot-father.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Собственно, написать код (логику работы нашего бота), используя любую подходящую библиотечку для телеграм:)
В коде мы используем полученный ранее API ключ, для взаимодействия с сервером телеграм.&lt;br /&gt;
Структура каталога нашего бота в общем случае должна содержать следующие файлы:
&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__init.py__&lt;/code&gt;&lt;/strong&gt; - необходим, чтобы Python рассматривал каталог, как содержащий пакеты для корректного импорта.&lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.py&lt;/code&gt;&lt;/strong&gt; – сам код (логика) бота.&lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config.py&lt;/code&gt;&lt;/strong&gt; – указываем наши токены, которые потом импортируются в &lt;code class=&quot;highlighter-rouge&quot;&gt;mian.py&lt;/code&gt;.&lt;br /&gt;
Вот так, если упрощенно представить на схеме, все и происходит:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-09-18/how_it_works.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Запустить главный файл &lt;code class=&quot;highlighter-rouge&quot;&gt;main.py&lt;/code&gt; на исполнение, и писать запросы нашему боту в телеграм-сервисе.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Создав бота, пришло время дать ему дополнительный функционал. Поскольку цель состоит в том, чтобы бот взаимодействовал с API геокодера, отвечая на запросы пользователя полным адресом географического объекта. Для данной цели подходит &lt;a href=&quot;https://yandex.ru/dev/maps/geocoder/doc/desc/concepts/about.html/&quot;&gt;&lt;strong&gt;API от Yandex&lt;/strong&gt;&lt;/a&gt;. Для бесплатного использования необходимо зарегистрироваться. При регистрации указать некоммерческое использование и после этого нам будет доступно 25000 запросов к API в сутки.&lt;br /&gt;
В ответ мы получим также API ключ, который необходимо использовать в коде бота для взаимодействия с Yandex геокодером.&lt;br /&gt;
Yandex геокодер использует прямое и обратное геокодирование. То есть, умеет отвечать полным адресом на текстовый запрос или координаты, и наоборот - отправлять координаты по указанному адресу. 
В коде бота достаточно описать функцию обработчик для запросов пользователя, которая будет формировать запрос, затем парсить ответ от Yandex и выводить ответ пользователю в телеграм-клиент. На официальной странице API Yandex геокодера все достаточно понятно описано.&lt;/p&gt;

&lt;p&gt;И вот когда бот написан и отлажен, пришло время дать ему онлайн-доступность. Потому, что до сих пор он работал только при условии запущенного &lt;code class=&quot;highlighter-rouge&quot;&gt;main.py&lt;/code&gt; файла на локальном компьютере с доступом в интернет. 
Для бесплатного хостинга подобных проектов подходит сервис &lt;a href=&quot;https://heroku.com&quot;&gt;&lt;strong&gt;Heroku&lt;/strong&gt;&lt;/a&gt; и созданный в нем активный аккаунт. Кроме того нам понадобится &lt;code class=&quot;highlighter-rouge&quot;&gt;Heroku Command Line Interface&lt;/code&gt; (CLI) , который можно скачать &lt;a href=&quot;https://devcenter.heroku.com/articles/getting-started-with-python#set-up&quot;&gt;тут&lt;/a&gt;, а также &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot;&gt;Git.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Добавим в директорию нашего бота еще пару файлов &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;&lt;/strong&gt; и &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;&lt;/strong&gt; – текстовый, но без расширения. Для этого необходимо использовать сохранение через Notepad++ (опция All-typs (&lt;em&gt;.&lt;/em&gt;))&lt;br /&gt;
Содержание файла:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker: python main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;&lt;/strong&gt; – обычный текстовый.&lt;br /&gt;
Содержание файла:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;appdirs==1.4.3
certifi==2018.1.18
Cython==0.23
Django==1.10.6
docutils==0.13.1
packaging==16.8
pipenv==11.8.0
psutil==5.0.1
pyowm==2.8.0
Pygments==2.2.0
pyparsing==2.2.0
pyTelegramBotAPI==3.6.1
python-telegram-bot==13.0.0
requests==2.13.0
six==1.10.0
virtualenv==15.1.0
virtualenv-clone==0.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Это необходимые компоненты для виртуального окружения на сервере. Конечно, всего этого нам сейчас и не нужно, но пусть будет:) Главное, чтобы необходимые нам библиотеки и фреймворки были нужной версии.
После того, как оба файла добавлены в каталог с ботом, необходимо запушить все на гитхаб в отдельный репозиторий, предварительно удалив из кода API токены (помним про безопасность).&lt;br /&gt;
Теперь у нас всё готово для загрузки бота на Heroku.&lt;br /&gt;
Вернем токены обратно в наш код и приступим к диплою. Из терминала (командной строки - в моем случае это Git bash):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Логинемся.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ heroku login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Нажимаем любую клавишу, переходим в браузер, подтверждаем вход.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Создаем проект.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Имя будет создано автоматически. Можно также это сделать из-под браузера.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Клонируем каталог с созданным проектом к себе. В данном каталоге должны быть файлы из нашего репозитория с телеграм-ботом.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku git:clone -a hidden-mountain-ххххх
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Переходим в каталог:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd hidden-mountain-ххххх
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;И делаем привычную связку команд для Git: add-commit-push.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
$ git commit -am &quot;my-deploy&quot;
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;После чего несколько минут будут устанавливаться указанные в &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; компонеты. По завершении процесса, будет запущен &lt;code class=&quot;highlighter-rouge&quot;&gt;main.py&lt;/code&gt; файл как указано в &lt;code class=&quot;highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;. После чего бот должен стать доступным. Если этого не происходит можно сделать команду:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku ps:scale worker=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Для отладки ошибок можно использовать логирование (именно этот режим позволил мне отловить ошибку импорта из каталога, который я удалил. И из-за этого мой бот не запускался удаленно.):&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Готово! Теперь проверяем бота - он должен работать в удаленном режиме.&lt;br /&gt;
Правда тут стоит сделать оговорку. Обычный бесплатный аккаунт на heroku дает вам 550 dyno часов в месяц. При достижении данного лимита, ваше приложение будет автоматически деактивировано. Информацию о текущем состоянии использования часов, можно посмотреть в настройках учетной записи.
Нажмите на свой аватар в правом верхнем углу сайта и выберите &lt;em&gt;Account settings&lt;/em&gt;, перейдите во вкладку &lt;em&gt;Billing&lt;/em&gt;, а затем в раздел &lt;em&gt;Free Dyno Usage&lt;/em&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Функциональное программирование. Элементарные конструкции.</title>
   <link href="http://localhost:4000/2020/07/28/FP-base-structs/"/>
   <updated>2020-07-28T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/07/28/FP-base-structs</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-07-04/fp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В продолжении «Лямбда-темы» в данной статье, я хочу показать основные элементарные структурные конструкции функционального программирования, которые я изучил на примере интерпретатора &lt;a href=&quot;https://repl.it/languages/Scheme&quot;&gt;Scheme Online Compiler (LISP)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Как уже было отмечено ранее (в предыдущем посте), в функциональных языках, вроде бы, понятные уже нам вещи, (например, вызов функции или арифметические операции) синтаксически, выглядят иначе. В самом начале мозг программиста, недавно пересевшего на изучение «функционалки», буквально переворачивается. Настолько непривычно мыслить в новом функциональном стиле. Но, как говорится, со временем привыкаешь ко всему.&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим простейшую операцию сложения двух чисел. Казалось бы, что может быть проще.  И, действительно, ничего сложного нет, однако есть нюансы, так как в «функционалке» мы оперируем только функциями.&lt;br /&gt;
Итак, 1 + 2 = 3. Мы привыкли к такой форме записи. Но, вот как это же привычное выражение будет выглядеть на функциональном языке: (+ 1 2) – результатом этого выражения будет число 3.  В первую очередь тут мы сталкиваемся с префиксной формой записи. То есть, функция “+” указывается вначале, а затем идут уже ее аргументы.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-07-28/FP_summ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еще одним базовым моментом является определение (define). При помощи &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; мы можем определить свою собственную константу или функцию.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(define my_const 7.777)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь, если мы вызовем константу &lt;code class=&quot;highlighter-rouge&quot;&gt;my_const&lt;/code&gt;, то интерпретатор вернет нам 7.777&lt;br /&gt;
Точно также мы можем определить и функцию. Давайте напишем функцию для вычисления квадрата числа и назовем ее square:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(define (square x) (* x x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-07-28/FP_define_function.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Если мы вызовем нашу функцию и передадим ей параметр 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;(square 2)&lt;/code&gt;, то она вернет нам результат 4.&lt;/p&gt;

&lt;p&gt;Кроме того, нам доступны и булевы выражения. А раз система способна оперировать True и False, то мы можем сделать конструкцию логического ветвления - «ифчик», проще говоря:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-07-28/FP_if.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Более сложные логические конструкции помогают делать логические операторы AND, OR, XOR, NOT.&lt;/p&gt;

&lt;p&gt;Еще одной базовой конструкцией, которую необходимо рассмотреть является рекурсия. Да-да, функция, которая вызывает саму себя.
Для примера рассмотрим рекуррентную реализацию функции чисел Фибоначчи - &lt;code class=&quot;highlighter-rouge&quot;&gt;Fib(n)&lt;/code&gt;.&lt;br /&gt;
Как мы знаем &lt;code class=&quot;highlighter-rouge&quot;&gt;Fib(0) = 0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Fib(1) = 1, Fib(n-1) + Fib(n-2)&lt;/code&gt;&lt;br /&gt;
В итоге имеем следующую последовательность: 0, 1, 1, 2, 3, 5, 8, 13, 21 … n&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-07-28/FP_fib.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ну а с помощью рекурсии, точнее при помощи параметризации вызова, мы можем описать такую базовую конструкцию в языках программирования, как цикл! Да, цикл в функциональных языках реализован через рекурсию. В LISP цикл loop мы можем записать так:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(define (loop start end acc) 
  (if (&amp;gt; start end) acc (loop (+ start 1) end (+ acc start))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Давайте запишем нашу функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;Fib(n)&lt;/code&gt; в итеративном стиле (при помощи цикла).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(define (fib n) (fib-iter 1 0 n)) 
(define (fib-iter a b count) 
  (if (= count 0) b (fib-iter (+ a b) a (- count 1)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В данном примере мы использовали внутреннее определение (функция &lt;code class=&quot;highlighter-rouge&quot;&gt;fib-iter&lt;/code&gt; использована в теле функции &lt;code class=&quot;highlighter-rouge&quot;&gt;fib&lt;/code&gt;, а затем только определена)&lt;br /&gt;
Стоит отметить, что применение рекурсии в чистом виде (не в итеративном стиле) не эффективно. Если представить графически выполнение рекуррентной функции, то получится дерево, в котором явно прослеживаются одинаковые поддеревья, результат выполнения которых не играет роли в общем вычислительном процессе. Давайте представим нашу функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;fib(n)&lt;/code&gt;, при n = 5:&lt;br /&gt;
&lt;img src=&quot;/image/post-2020-07-28/recurs.jpg&quot; alt=&quot;&quot; /&gt;
На рисунке выше, я постарался отобразить зеленым и красным цветами – одинаковые участки выполнения рекурсии.&lt;/p&gt;

&lt;p&gt;В данной статье я постарался показать, как при помощи элементарных комбинаций (функции, рекурсия-цикл, логические ветвления), мы можем оперировать базовыми конструкциями языка программирования.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Функциональное программирование. Другой взгляд на мир.</title>
   <link href="http://localhost:4000/2020/07/04/Functional-programming/"/>
   <updated>2020-07-04T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/07/04/Functional-programming</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-07-04/fp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В своей сегодняшней статье, я хотел бы немного затронуть теорию программирования, а именно, поговорить о функциональном программировании. Дело в том, что рано или поздно человек, изучающий программирование, выходит за рамки всем привычной классической императивной модели, чтобы узнать больше, и взглянуть на процесс составления кода с другой стороны. Настало время и мне заглянуть за «забор» привычного и родного «двора», в котором уже многое знакомо, в котором я вырос.&lt;/p&gt;

&lt;p&gt;На сегодняшний день во вселенной программирования существует несколько основных парадигм, т.е. совокупностей идей и понятий, определяющих стиль написания компьютерных программ. Есть много мнений по поводу классификации всех существующих методологий и парадигм. Я не стану ни с кем спорить, а просто выражу свое мнение. На мой взгляд, делать основное разделение стоит на Декларативное и Императивное программирование.&lt;/p&gt;

&lt;p&gt;Для привычного многим императивного стиля понимания и написания кода, которому учат в школах и университетах в рамках общеобразовательных программ, и к которому большинство из нас так привыкло, свойственно последовательное выполнение команд. Т.е. компьютеру передается совокупность последовательных инструкций, выполнение которых неразрывно связано с изменением состояния этой программы. Вот почему в императивных языках обязательно присутствует понятие «переменная». А раз есть переменные — должен быть и оператор присваивания. Переменные используются как ячейки для хранения данных, которые по ходу программы могут быть переопределены, а данные перезаписаны.&lt;/p&gt;

&lt;p&gt;Однако существует принципиально иной подход к разработке, а именно декларативное программирование. Данное направление также включает в себя несколько парадигм, одной из которых является функциональная парадигма. При этом подходе программа воспринимается уже не как набор инструкций, а как набор выражений. А поскольку выражения вычисляются путём применения функций к аргументам (то есть, по сути, к другим выражениям), там нет места ни переменным, ни оператору присваивания. Каждая функция в конечном итоге представляет собой выражение, вычисляемое посредством применения каких-то других функций к каким-то другим аргументам, тогда нам просто не нужно ничего присваивать.&lt;br /&gt;
Действительно, с функциональным программированием все иначе, нежели с императивным. Тут совсем другая философия, которая ближе к классической математике. Как я уже отметил, основным инструментом является функция. Функция может сделать только одно - рассчитать что-то и вернуть как результат. Данное свойство еще называют ссылочной прозрачностью или «чистой» функцией. Чистой называется такая функция, которая предельно прозрачна: её выходное значение определяется только её аргументами и более ничем. Именно поэтому чистая функция предельно надёжна, ведь она не может преподнести нам никаких сюрпризов. Это и есть функция в математическом смысле.&lt;/p&gt;

&lt;p&gt;Если немного окунуться в историю, то функциональное программирование берет начало из формальной системы лямбда исчислений, которую разработал Алонзо Чёрч. Лямбда исчисления - это своего рода работа с абстрактными математическими головоломками, для изучения общих понятий вычислений, если сказать совсем кратко и не вдаваясь в академическое определение. В 1958 году появился язык обработки списков, List Processing language (Lisp). Lisp задумывался как имплементация Лямбда-исчисления Алонзо. В 1973 году группа программистов в лаборатории искусственного интеллекта в Массачусетском технологическом институте разработали железо, которое они назвали Lisp-машиной. Это была аппаратная реализация лямбда-исчислений Алонзо.&lt;/p&gt;

&lt;p&gt;Функциональное программирование это не только теория программирования или computer since, данный подход используется и в продакшене. 
Например, Haskell — чистый функциональный язык с ленивой моделью вычислений и статической типизацией. Благодаря одному из свойств «чистых» функций, на Haskell можно спокойно писать коммерческий софт. &lt;br /&gt;
&lt;a href=&quot;https://wiki.haskell.org/Haskell_in_industry&quot;&gt;Вот для примера список компаний использующий Haskell в продакшене.&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://code.facebook.com/posts/302060973291128/open-sourcing-haxl-a-library-for-haskell/&quot;&gt;Вот как Facebook борется со спамом с помощью Хаскеля.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В следующих статьях я планирую более подробно поговорить, о том, что нового я узнал при изучении функционального программирования на примере LISP и его онлайн интерпетатора Scheme &lt;a href=&quot;https://repl.it/languages/Scheme&quot;&gt;https://repl.it/languages/Scheme.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Для данной статьи были использованы материалы из следующих источников:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.ohaskell.guide/immutability-n-purity.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Книга Миран Липовача. Изучай Haskell во имя добра!&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Своя кнопка в админке.</title>
   <link href="http://localhost:4000/2020/06/14/Django-button_admin/"/>
   <updated>2020-06-14T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/06/14/Django-button_admin</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-06-14/admin.jpg&quot; alt=&quot;&quot; /&gt;
В Django, как мы знаем, очень много уже реализованного функционала идет сразу в комплекте, так сказать, «из коробки». Сделано это разработчиками для нашего удобства и, соответственно, для простоты разработки пользовательских проектов на данном вебфреймворке. За что, конечно-же, отдельное спасибо разработчикам.&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим админку. Админ панель в Django представляет из себя своего рода пункт управления для администратора, где можно созвать, редактировать, удалять модели, объединять в группы созданных пользователей, назначать им права и многое другое. Для того, чтобы попасть в админку, необходимо пройти по адресу  &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:8000/admin/&lt;/code&gt;. Далее мы попадем на страницу авторизации. Но для того, чтобы мы успешно авторизовались, необходимо заранее создать суперпользователя (собственно, самого админа).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;где мы указываем username , email и password с подтверждением.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Теперь мы можем успешно пройти авторизацию и попасть в админку с возможностью использовать весь функционал администратора.&lt;br /&gt;
Но в процессе разработки бывают ситуации, когда необходимо «подогнать» под себя, или кастомизировать стандартную админку Django. Сейчас я не буду углубляться во все способы и возможности это сделать (например, через наследование от класса &lt;code class=&quot;highlighter-rouge&quot;&gt;admin.ModelAdmin&lt;/code&gt; и переопределение поля для отображения полей модели, добавление фильтров и поиска и т.д.).&lt;/p&gt;

&lt;p&gt;Сегодня я хотел бы рассказать, как быстро сделать свою пользовательскую кнопку прямо в админ страничке, по нажатию на которую происходил бы GET запрос, и нам представлялся бы пользовательский шаблон HTML (ну или какой-либо user interface).&lt;br /&gt;
Итак, для добавления своей кнопки нам необходимо убедиться, что наше приложение указано в &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; в списке &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTALLED_APPS&lt;/code&gt;. Далее нам необходимо создать «расширение» для стандартного админ-шаблона &lt;code class=&quot;highlighter-rouge&quot;&gt;change_form.html&lt;/code&gt;. Разместить его можно по одной из следующих схем:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Шаблон применяется ко всем change_form:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;      

&lt;span class=&quot;c1&quot;&gt;# Шаблон применяется к change_lists моего приложения myapp:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;# Шаблон применяется к change_list моего приложения myapp и только для модели mymodel:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mymodel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Тут стоит сделать оговорку, и проверить правильно ли размещена директория templates. Она должна быть на одном уровне дерева каталогов с файлом &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt; и нашей базой данных &lt;code class=&quot;highlighter-rouge&quot;&gt;bd.sqlite3&lt;/code&gt;.&lt;br /&gt;
Если, все же, после размещения шаблона по одному из указанных путей, шаблон не определяется Django автоматически, то можно прописать его принудительно в виде атрибута внутри класса админ-модели в &lt;code class=&quot;highlighter-rouge&quot;&gt;admin.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#... 
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;change_list_template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;path/to/change_form.html&quot;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Затем, нам необходимо отредактировать содержимое нашего расширения для стандартного &lt;code class=&quot;highlighter-rouge&quot;&gt;change_form.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% extends &quot;admin/change_form.html&quot; %}
{% load i18n %}

{% block submit_buttons_bottom %}

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button_title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;location.href='{% url 'admin:user_view' %}'&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

{{ block.super }}

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Данным кодом мы расширяем стандартный джанговский функционал, который внедрит нашу кнопку с именем &lt;code class=&quot;highlighter-rouge&quot;&gt;Button_title&lt;/code&gt;, и при нажатии отправит GET запрос для &lt;code class=&quot;highlighter-rouge&quot;&gt;user_view&lt;/code&gt;.&lt;br /&gt;
Всю механику отлова url и подстановки под этот url нашей пользовательской &lt;code class=&quot;highlighter-rouge&quot;&gt;user_view&lt;/code&gt; будем делать внутри админ-модели в методе &lt;code class=&quot;highlighter-rouge&quot;&gt;get_urls()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ниже в моем примере, использовался шаблон для расширения (отрисовки кнопки) – &lt;code class=&quot;highlighter-rouge&quot;&gt;my_change_form.html&lt;/code&gt;, пользовательская функция-вьюха - &lt;code class=&quot;highlighter-rouge&quot;&gt;get_repayment()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RepaymentAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repayment&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'customer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'payment_summ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'create_data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'processing_date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'account_number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# определяем отображаемые поля модели Repayment внутри админ-модели RepaymentAdmin
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# метод обработки url, с подстановкой необходимой view.
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RepaymentAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;custom_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'get/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin_site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_repayment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'repayment_view'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;custom_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_repayment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;# внутри данного метода (который подставится под запрос url), мы выполним какую-либо логику, и вернем в ответ пользовательский шаблон index.html
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# переопределяем атрибут для принудительного использования нашего шаблона:
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;change_form_template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'admin/myapp/repayment/my_change_form.html'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;В итоге у нас должна отрисоваться пользовательская кнопка внутри админ страницы в модели пользователя, при нажатии на которую отработает метод &lt;code class=&quot;highlighter-rouge&quot;&gt;def get_repayment&lt;/code&gt; и вернет пользовательский HTML шаблон:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-06-14/Screenshot_1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Время поговорить о времени.</title>
   <link href="http://localhost:4000/2020/05/28/Django-timezone/"/>
   <updated>2020-05-28T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/05/28/Django-timezone</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-05-28/time2.jpg&quot; alt=&quot;&quot; /&gt;
Сегодня я хотел бы сделать небольшие заметки относительно тайм-зон и о том, как я столкнулся с их применением в Django.&lt;br /&gt;
&lt;strong&gt;Тайм-зона&lt;/strong&gt; – это привязка к часовому поясу. Как мы знаем, часовой пояс это, по сути, поправка, на которую корректируют время по географическому расположению относительно UTC. В свою очередь, &lt;strong&gt;UTC&lt;/strong&gt; (Universal Time Coordinated) – это, своего рода, абсолютное время, относительно которого уже идет смещение поправки по часовым поясам в зависимости от географического расположения пользователя.&lt;/p&gt;

&lt;p&gt;В Django настройки тайм-зоны выставляются глобально в файле &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TIME_ZONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'UTC'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;USE_TZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Полем &lt;code class=&quot;highlighter-rouge&quot;&gt;TIME_ZONE&lt;/code&gt; (для БД не поддерживающих часовые пояса) мы определяем, непосредственно, сам часовой пояс. В данном случае UTC. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;USE_TZ&lt;/code&gt; – этим полем мы определяем для Django, что значение времени (например, поле модели типа &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeField&lt;/code&gt;) будет записано в базу данных в той тайм-зоне, которая указана в настройке проекта Django в поле &lt;code class=&quot;highlighter-rouge&quot;&gt;TIME_ZONE&lt;/code&gt;. &lt;br /&gt;
Тут сразу следует сделать оговорку. Не все базы данных поддерживают формат времени с учетом тайм-зоны. Например, SQLite, MySQL, Oracle не поддерживают часовые пояса (а как раз SQLite, идет как стандартная БД для Django “из коробки”) – и в данном случае , при &lt;code class=&quot;highlighter-rouge&quot;&gt;USE_TZ = True&lt;/code&gt;, фреймворк запишет время с учетом установки &lt;code class=&quot;highlighter-rouge&quot;&gt;TIME_ZONE&lt;/code&gt;. 
В случае, если в проекте Django используется БД, поддерживающая работу с часовыми поясами (например, PostgreSQL), то опция &lt;code class=&quot;highlighter-rouge&quot;&gt;USE_TZ&lt;/code&gt; должна быть установлена в &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, тем самым позволяя БД работать с часовым поясом, переданным в пользовательских данных без учета настройки проекта Django &lt;code class=&quot;highlighter-rouge&quot;&gt;TIME_ZONE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим следующий случай. В нашем приложении по учету автомобилей есть несколько предприятий. Для каждого предприятия нам необходимо реализовать возможность установки тайм-зоны путем выбора из предложенных вариантов часовых поясов, чтобы каждое предприятие могло работать в своем часовом поясе. Если при создании предприятия тайм-зона не выбрана, то это значение соответствует UTC. В &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt; добавим поле для нашей модели &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise:&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enterprise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMEZONES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pytz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_timezones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_timezones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time_zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TIMEZONES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'UTC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Далее, для взаимодействия с моделями автомобилей добавим в модель &lt;code class=&quot;highlighter-rouge&quot;&gt;Car&lt;/code&gt; поле, отвечающее за дату и время приобретения автомобиля, или постановки на учет в данном предприятии - как угодно. Данные о приобретении автомобиля заносятся автоматически и значение берется из текущего времени пользователя (&lt;code class=&quot;highlighter-rouge&quot;&gt;auto_now=True&lt;/code&gt;) с поправкой на настройку в &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; (мы используем стандартную БД SQLite). Т.о. время в поле модели &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise&lt;/code&gt; запишется в абсолютном значении UTC.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fuel_util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_of_buy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;of_enterprise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Enterprise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SET_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Т.к. в наш проект ранее мы интегрировали REST API, то изменять (делать поправку на часовой пояс предприятия) необходимо не в HTML шаблоне, а на стороне бэкенда для того, чтобы API сформировал уже готовые данные с учетом поправки на тайм-зону, и отдал эти данные (например, словарем) во фронтенд. Тем самым мы придерживаемся концепции API и оставляем логику на стороне бэкенда в нашем &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# переопределяем родительский метод для запроса из БД с фильтром для наших условий
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# получаем данные о имени пользователя из request
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;list_car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# формируем список всех автомобилей
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager__username__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# получаем предприятие по пользователю
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;list_car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# получаем список авто по конкретному предприятию
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                 &lt;span class=&quot;c1&quot;&gt;# получаем таймзону из предприятия текущего менеджера
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# проходимся по всем автомобилям из списка запроса
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;car_of_db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# получаем из БД  машину по id
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;datatime_of_db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_of_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_of_buy&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# получаем из поля значение даты и времени покупки машины
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;datatime_tz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datatime_of_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tzinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# корректировка даты и времени относительно другой tz
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_of_buy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datatime_tz&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# записываем откорректированное время в список для отображения в шаблоне
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_car&lt;/span&gt;    

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager__username__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# получаем предприятие по пользователю
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# получаем таймзону из предприятия текущего менеджера
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Я постарался максимально подробно в коде расписать каждое действие пошагово, в целях бОльшей понятности.&lt;/p&gt;

&lt;p&gt;В итоге, наш API будет отдавать словарь с уже исправленным временем, применительно к часовому поясу того предприятия, за которым закреплены автомобиль и авторизованный сотрудник, который делает запрос на просмотр списка доступных авто.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Пользовательские команды и Пагинация.</title>
   <link href="http://localhost:4000/2020/05/08/Django-commands_and_pagination-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/"/>
   <updated>2020-05-08T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/05/08/Django-commands_and_pagination — копия</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-05-08/head.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В Django имеется функционал создания своих собственных пользовательских консольных команд для администрирования проекта.&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим пример создания такой команды, применительно к нашему учебному проекту с автопредприятиями. Наша команда будет генерировать указанное количество автомобилей применительно к предприятию (или списка предприятий), которое также будет указываться в параметрах команды.&lt;/p&gt;

&lt;p&gt;Для этого создадим каталог &lt;code class=&quot;highlighter-rouge&quot;&gt;management&lt;/code&gt; в основном каталоге проекта (на уровне каталогов &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;аpi&lt;/code&gt;). В management создадим подкаталог &lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt; и уже непосредственно в нем будем создавать наши команды. Для того чтобы Python учитывал каталог &lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt;, как свой пакет, необходимо добавить пустой файл &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;. Для получения пользовательской команды достаточно создать питоновский файл с таким-же именем, как и у предполагаемой команды. Например, для команды генерирующей наши машинки – &lt;code class=&quot;highlighter-rouge&quot;&gt;gencar&lt;/code&gt;, мы создаем &lt;code class=&quot;highlighter-rouge&quot;&gt;gencar.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Создадим класс команды - &lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; , наследованный от класса &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseCommand&lt;/code&gt;, который предоставляется фреймворком:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.management.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseCommand&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.utils.crypto&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_random_string&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework.generics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;...models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Задаём текст помощи, который будет отображён при выполнении команды
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# python manage.py gencars --help
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'Generate cars. Создание моделей Car со случайным содержанием полей'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Указываем сколько и каких аргументов принимает команда.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# В данном случае первый аргументом идет id предприятия, nargs='+' - минимум один аргумент, либо список.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--enterprise_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u'Для какого предприятия(либо список enterprise_id через пробел)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Вторым аргументом передаем число
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u'Количество создаваемых Car'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Получаем аргументы:
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;enterprise_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'enterprise_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;number_cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# enterprise_id - возможно список, по этому итерируемся сначала по нему.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enterprise_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;of_enterprise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Создаем число машинок = number_cars
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_random_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# случайная генерация строки для поля Car
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_random_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_random_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# Непосредственно, создание модели типа Car, с указанными полями
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fuel_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of_enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_enterprise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Successfully created {0} cars!'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Current list cars: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_arguments()&lt;/code&gt;- в данной функции мы определяем сколько и каких аргументов будет передано в команду. В нашем случае мы используем два параметра:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; (enterprise), где указываем id предприятия, к которому будет привязана созданная машинка, или список id предприятий.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; (number) – задает количество моделей для генерации (сколько машинок будет создано).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handle()&lt;/code&gt; – переопределяя эту функцию, мы задаем обработку переданных параметров, и дальнейшую логику действий по реализации семантики нашей команды. Все аргументы приходят в списке (options). Также в данной функции для генерации случайного текста мы использовали метод &lt;code class=&quot;highlighter-rouge&quot;&gt;get_random_string()&lt;/code&gt;, импортированного из &lt;code class=&quot;highlighter-rouge&quot;&gt;django.utils.crypto&lt;/code&gt;. &lt;br /&gt;
Далее, если мы введем в командной строке:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py gencar –e 1 –n 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;у нас создастся 10 машинок прикрепленный к предприятию с id 1.&lt;/p&gt;

&lt;p&gt;Также мы можем создать, например, по 50 машинок для предприятия с id 1 и id 2:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py gencar –e 1 2 –n 50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Теперь у нас появилась возможность массово создавать модели Car со случайным значением полей. Но как быть с отображением? Напомню, что сейчас список объектов Car отображается вот так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-05-08/no_paginations.jpg&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;
Что будет, если мы создадим, скажем, 5000 машинок? В данном случае необходимо реализовать постраничное отображение – пагинацию.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Пагинация&lt;/strong&gt; – это разбиение на страницы или постраничная нумерация. В Django REST фреймворке есть стандартные классы для реализации данного функционала. Я опишу самый простой способ сделать это в рамках REST фреймворка.&lt;/p&gt;

&lt;p&gt;Для начала укажем в глобальных настройках нашего проекта (&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;) класс, который будет использоваться для пагинации по умолчанию:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# глобальная настройка для стиля пагинации с указанием количества элементов на странице PAGE_SIZE
&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;'DEFAULT_PAGINATION_CLASS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rest_framework.pagination.LimitOffsetPagination'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'PAGE_SIZE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'PAGE_SIZE'&lt;/code&gt;- определяет количество элементов на одной странице.&lt;/p&gt;

&lt;p&gt;Далее в нашем файле с представлением (api\view.py) переопределим поле &lt;code class=&quot;highlighter-rouge&quot;&gt;pagination_class = LimitOffsetPagination&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListCreateAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# представление для списка авто с методами create и get
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;serializer_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarSerializer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pagination_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LimitOffsetPagination&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Также, необходимо добавить логику в наш метод get():&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# переопределяем родительский метод для получения запроса GET
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paginate_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# формируем данные для отображения на одной странице
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# сериализуем данные page
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_paginated_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Тут мы создаем экземпляр класса нашего пагинатора, передаем ему результат запроса (queryset). Объект &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt; – будет являться набором данных для одной страницы. Далее мы через сериализацию выводим данные.&lt;/p&gt;

&lt;p&gt;Как можно увидеть, теперь у нас есть постраничное отображение списка Car:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-05-08/paginations.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Немного о SCRF.</title>
   <link href="http://localhost:4000/2020/04/20/Django-scrf/"/>
   <updated>2020-04-20T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/04/20/Django-scrf</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-04-20/csrf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-Site Request Forgery&lt;/strong&gt; – если адаптировать на русский язык, то получается что-то вроде межсайтовая подделка запроса. Суть данной атаки в том, что браузер не может различить, было ли действие выполнено пользователем умышленно (например, переход по ссылке или нажатие на кнопку отправки формы на целевой ресурс), или пользователь выполнил действие не умышленно (например, при посещении ресурса-злоумышленника, этот ресурс отправил запрос от имени пользователя на целевой ресурс, на котором пользователь остался «залогиненым»). &lt;br /&gt;
Получается, что ресурс-злоумышленник, вклинившись между пользователем и целевым ресурсом (&lt;strong&gt;cross-site&lt;/strong&gt;), может отправить HTTP запрос (&lt;strong&gt;request&lt;/strong&gt;), используя авторизированные данные пользователя, и совершить какие-либо действия от имени пользователя на целевом ресурсе (&lt;strong&gt;forgery&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-04-20/csrf-attack.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
На сегодня общепринятым методом защиты от подобного рода атак, является использование csrf-токенов. &lt;strong&gt;Токен&lt;/strong&gt; - сгенерированный случайным образом сервером ключ, который передается клиенту и возвращается обратно серверу для проверки.
Своеобразная система «свой» - «чужой».&lt;/p&gt;

&lt;p&gt;В Django также реализован данный функционал. CSRF защита является частью ядра Django. Кроме того, мы можем использовать декоратор &lt;code class=&quot;highlighter-rouge&quot;&gt;django.views.decorators.csrf.csrf_protect&lt;/code&gt; для обеспечения защиты для конкретных вьюх. &lt;br /&gt;
Django использует механизм csrf protect. Он заключается в том, чтобы отдать токен клиенту двумя методами: в куках и в одном из параметров ответа (header или внутри HTML).&lt;br /&gt;
При запросе клиента на стороне сервера генерится токен. В ответе сервера, токен возвращается в cookie (&lt;code class=&quot;highlighter-rouge&quot;&gt;X-CSRF-Token&lt;/code&gt;) и в одном из параметров ответа (в header или внутри HTML).&lt;br /&gt;
В последующих запросах клиент обязан передать оба,  полученных ранее токена. Один как cookie, другой либо как header, либо внутри POST данных формы. &lt;br /&gt;
При получении запроса от клиента небезопасным методом (POST, PUT, DELETE, PATCH) сервер проверяет на идентичность токен из cookie и токен, который явно прислал клиент.&lt;/p&gt;

&lt;p&gt;Давайте проверим данный механизм при помощи curl. &lt;br /&gt;
&lt;strong&gt;Curl&lt;/strong&gt; – кроссплатформенная программа для командной строки. При помощи Curl мы можем взаимодействовать с сервером по различным протоколам. Нас, в частности, интересуют HTTP-запросы. 
Мы авторизуемся на сайте и попробуем обратиться, используя HTTP-запросы, чтобы получить список автомобилей, ограничение доступа к которому я описывал в предыдущих статьях.&lt;br /&gt;
Для Windows, как для наиболее распространенной платформы, запускаем &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; от имени админа. Итак, если мы просто отправим POST запрос с данными для авторизации:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -d &quot;username=manager&amp;amp;password=1234567&quot; http://127.0.0.1:8000/accounts/login/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;В ответ получаем сообщение сервера с кодом 403, а именно &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;In general, this can occur when there is a genuine Cross Site Request Forgery, or when&quot;&lt;/code&gt;, что говорит нам о не совпадении csrf токена.&lt;br /&gt;
Для того, чтобы сервер понял, что мы «свои» сымитируем действия браузера. Сделаем сначала предварительный GET-запрос, затем сохраним полученный cookie файл, вытащим из него csrf-token и передадим его в повторном POST запросе c данными для авторизации:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -c cookie.txt http://127.0.0.1:8000/accounts/login/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Подставляем полученный токен из cookie.txt в следующий запрос. В нем мы передаем серверу, как сам cookie, так и поле c токеном:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --cookie cookie.txt http://127.0.0.1:8000/accounts/login/ -H &quot;X-CSRFToken: owPT8worwO0Bd8AEfqUg1FB2NIPkEQ8DHoJ0kAVPUm1hsSrMS0y0AT7T6qsUNqXa&quot; -b &quot;csrftoken=owPT8worwO0Bd8AEfqUg1FB2NIPkEQ8DHoJ0kAVPUm1hsSrMS0y0AT7T6qsUNqXa&quot; -d &quot;username=manager1&amp;amp;password=Qwertyu_123&amp;amp;next=&quot; -c cookie.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;В этот раз, сервер отвечает уже сообщением 302, что означает редирект. А мы помним, что в механизме авторизации редирект указывается в настройках, как адрес куда нас перенаправят при успешной авторизации. &lt;br /&gt;
Итак, мы успешно авторизовались. Осталось получить список автомобилей. Для этого отправим GET-запрос вместе с cookie:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --cookie cookie.txt -v http://127.0.0.1:8000/api/cars/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Сервер ответил кодом 200 ОК. А ниже мы видим наш список в JSON формате:
&lt;img src=&quot;/image/post-2020-04-20/curl-cmd.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Авторизация и ограничение доступа.</title>
   <link href="http://localhost:4000/2020/04/15/Django-authorization/"/>
   <updated>2020-04-15T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/04/15/Django-authorization</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-04-15/zamok1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Как мы уже ранее говорили, &lt;strong&gt;Аутентификация&lt;/strong&gt; — это процесс подтверждения, что пользователь именно тот, за кого себя выдает, то есть, процесс сопоставления переданных данных от пользователя с существующими учетными данными в БД. &lt;br /&gt;
&lt;strong&gt;Авторизация&lt;/strong&gt; — это процесс принятия решения о том, что именно этой аутентифицированной персоне разрешается делать, то есть, назначение прав пользователю для разграничения доступа к ресурсам. И, как раз, об ограничении доступа сегодня и пойдет речь.&lt;/p&gt;

&lt;p&gt;Допустим в нашем проекте или приложении необходимо разграничить доступ различным пользователям к ресурсам. Например, у нас есть автотранспортные предприятия. У каждого предприятия есть свои сотрудники – пользователи. За каждым предприятием закреплены свои автомобили. Соответственно, мы создали модели предприятий, модели пользователей и модели автомобилей с соответствующими связями между таблицами БД. И нам нужно сделать так, чтобы сотрудник (пользователь) закрепленный за своим предприятием мог получить доступ к списку автомобилей только своего предприятия.&lt;br /&gt;
В данном случае удобно (дабы не изобретать велосипед) использовать стандартный функционал Django «из коробки», а именно использовать стандартный класс &lt;strong&gt;User&lt;/strong&gt; для создания моделей сотрудников. Например, наши пользовательские классы &lt;code class=&quot;highlighter-rouge&quot;&gt;Driver&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager&lt;/code&gt;, мы сделаем наследниками класса User.&lt;/p&gt;

&lt;p&gt;Ограничение доступа можно cделать на уровне представлений (&lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;). Самый простой способ это реализовать – использовать модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth&lt;/code&gt;.&lt;br /&gt;
Тут стоит сделать уточнение, если наше view представляет из себя функцию, то для авторизации следует использовать соответствующий декоратор &lt;code class=&quot;highlighter-rouge&quot;&gt;@login_required&lt;/code&gt;, предварительно импортировав его:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login_required&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login_required&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Мы знаем, что декоратор проверяет условие (контракт) до того, как функция, обернутая в этот декоратор, будет выполнена. Поэтому с  &lt;code class=&quot;highlighter-rouge&quot;&gt;login_required&lt;/code&gt; логика следующая:&lt;/p&gt;

&lt;p&gt;Если пользователь не авторизован, то будет перенаправлен на URL, указанный в параметре конфигурации &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.LOGIN_URL&lt;/code&gt;, передавая текущий абсолютный путь в запросе. &lt;br /&gt;
Если пользователь авторизован, то выполняет код представления (view). В коде представления не требуется выполнять проверку авторизован ли пользователь или нет.&lt;/p&gt;

&lt;p&gt;В случае, если наше представление организовано в виде класса, тогда нам понадобиться соответствующий миксин &lt;code class=&quot;highlighter-rouge&quot;&gt;LoginRequiredMixin&lt;/code&gt;. Импрортируем его из &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.mixins&lt;/code&gt;. Мы должны включить (подмешать) данный миксин в список наследования класса нашего представления. Кроме того, в теле класса мы должны переопределить стандартное поле данного миксина: &lt;code class=&quot;highlighter-rouge&quot;&gt;raise_exeption = True&lt;/code&gt;, для случая, если пользователь не авторизован. Для него будет выброшена ошибка 403.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.auth.mixins&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginRequiredMixin&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raise_exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Логика работы данного миксина (класса) схожа с логикой рассмотренного ранее декоратора:&lt;/p&gt;

&lt;p&gt;Если пользователь авторизован, срабатывает редирект на указанный в параметре конфигурации &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.LOGIN_URL&lt;/code&gt;. Иначе, пользователь получает ошибку 403.&lt;br /&gt;
На самом деле, модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;auth из django.contrib&lt;/code&gt; имеет гораздо больший функционал, помимо того, что был описан в данной статье. И его рассмотрение, тема для отдельного поста. Но в рамках сегодняшней задачи, мы достаточно просто и быстро добились необходимого. &lt;br /&gt;
Таким образом, мы добиваемся того, что логика работы view будет ограничена проверкой, является ли пользователь аутентифицированным. Что позволяет нам добиться ограничения выполнения кода внутри view.&lt;/p&gt;

&lt;p&gt;Мы описали только половину того, как можно решить нашу задачу. Напомню, нам необходимо, чтобы авторизованный пользователь (например, Manager) получал список именно тех автомобилей, которые принадлежат его предприятию. &lt;br /&gt;
Допустим, текущий пользователь авторизован и код внутри views будет выполнен. Таким образом, нам необходимо отфильтровать для данного авторизованного пользователя те автомобили, которые соответствуют его предприятию.&lt;br /&gt;
Данные о текущем пользователе можно получить из переменной &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;, которая автоматически передается при вызове view. Если мы используем функции в качестве представлений, то можно просто указать &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; в качестве входного параметра, и обращаться к ней внутри функции:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Если в качестве организации наших представлений использованы классы, то придется переопределять родительский метод, для того чтобы получить доступ к &lt;code class=&quot;highlighter-rouge&quot;&gt;self.request&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;..models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enterprise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarListView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListModelMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# визуализатор list для модели Car
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager__username__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list_car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_enterprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enterprise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_car&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_queryset&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarSerializer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raise_exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# переопределение поля исключения, в случае не аутентифицированного пользователя
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;На примере выше мы переопределили родительский метод &lt;code class=&quot;highlighter-rouge&quot;&gt;get_queryset&lt;/code&gt;. Внутри метода обратились к данным текущего пользователя, &lt;code class=&quot;highlighter-rouge&quot;&gt;user_name = self.request.user.username&lt;/code&gt;. Затем использовали запрос к модели &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise  через objects.get&lt;/code&gt; с параметрами запроса полей через связную таблицу. В данном случае мы обращаемся к модели  &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise&lt;/code&gt;, через связную (по первичному ключу) модель &lt;code class=&quot;highlighter-rouge&quot;&gt;manager&lt;/code&gt; по полю &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; соответствующему значению &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, которое мы вытащили из &lt;code class=&quot;highlighter-rouge&quot;&gt;self.request&lt;/code&gt;. Затем, получив объект в виде &lt;code class=&quot;highlighter-rouge&quot;&gt;enterprise&lt;/code&gt;, мы фильтруем по названию предприятия те автомобили, которые к нему привязаны, (&lt;code class=&quot;highlighter-rouge&quot;&gt;list_car = Car.objects.filter(of_enterprise=enterprise)&lt;/code&gt; ), и возвращаем список найденных автомобилей в стандартное поле класса &lt;code class=&quot;highlighter-rouge&quot;&gt;queryset&lt;/code&gt;. &lt;br /&gt;
Это достаточно тривиальный пример, который показывает логику запросов и фильтраций.&lt;/p&gt;

&lt;p&gt;Теперь каждый «залогиненый» пользователь (manager), при обращении к визуализатору списка автомобилей, будет получать список только тех автомобилей, которые закреплены за его предприятием. Тем самым, мы добились разграничения доступа пользователей к ресурсам.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Быстро прикручиваем REST API к проекту.</title>
   <link href="http://localhost:4000/2020/04/13/Django-create-rest-api/"/>
   <updated>2020-04-13T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/04/13/Django-create-rest-api</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-04-13/add_rest.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Давайте рассмотрим Django REST framework (&lt;code class=&quot;highlighter-rouge&quot;&gt;djangorestframework&lt;/code&gt;), применительно к своему Django-проекту. Это библиотека, которая взаимодействует с моделями Django для реализации гибкого API в рамках разрабатываемого проекта.&lt;br /&gt;
Итак, Django REST framework использует три слоя: маршрутизатор (&lt;code class=&quot;highlighter-rouge&quot;&gt;urls&lt;/code&gt;), представление (&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewSet&lt;/code&gt;) и сериализатор (&lt;code class=&quot;highlighter-rouge&quot;&gt;serializer&lt;/code&gt;).&lt;br /&gt;
&lt;strong&gt;Маршрутизатор&lt;/strong&gt; определяет URL-адреса, которые будут предоставлять доступ к каждому виду.  &lt;br /&gt;
&lt;strong&gt;Представление&lt;/strong&gt; определяет функции или классы (чтение, создание, обновление, удаление), которые будут доступны через API.&lt;br /&gt;
&lt;strong&gt;Сериализатор&lt;/strong&gt; преобразует информацию, хранящуюся в базе данных, и определенную с помощью моделей Django, в формат, который легко и эффективно передается через API.&lt;/p&gt;

&lt;p&gt;Собственно, по этим слоям мы и будем двигаться при создании REST API в своем приложении. &lt;br /&gt;
Не забываем добавить библиотеку &lt;code class=&quot;highlighter-rouge&quot;&gt;djangorestframework&lt;/code&gt; в настройки нашего проекта. В файле &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; добавим в атрибут установленных приложений &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS = […]&lt;/code&gt; строку &lt;code class=&quot;highlighter-rouge&quot;&gt;rest_framework&lt;/code&gt; в кавычках.&lt;br /&gt;
Далее, создадим отдельную директорию &lt;code class=&quot;highlighter-rouge&quot;&gt;api/&lt;/code&gt; в корне каталога с приложением на одном уровне с директориями &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;. Внутри директории &lt;code class=&quot;highlighter-rouge&quot;&gt;api/&lt;/code&gt; будут располагаться наши файлы (слои) &lt;code class=&quot;highlighter-rouge&quot;&gt;serializers.py&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;.
Создадим для начала сериализатор (в &lt;code class=&quot;highlighter-rouge&quot;&gt;serializers.py&lt;/code&gt;), наследуя его от &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelSerializer&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThingSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt; - тут мы указываем какую модель будем использовать (импортируем из &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;fields&lt;/code&gt; - указываем, какие поля доступны этому сериализатору из выбранной модели. Также, может быть установлен &lt;code class=&quot;highlighter-rouge&quot;&gt;exclude&lt;/code&gt; вместо &lt;code class=&quot;highlighter-rouge&quot;&gt;fields&lt;/code&gt;, который будет включать все поля модели, кроме тех, которые указаны в exclude.&lt;/p&gt;

&lt;p&gt;Сериализатор анализирует информацию в обоих направлениях (чтение и запись), тогда как представление (&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewSet&lt;/code&gt;)  - это тот код, в котором определены доступные операции. Наиболее распространенным ViewSet является &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelViewSet&lt;/code&gt;&lt;br /&gt;
Внутри &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt; создаем представление (класс) наследуя его от &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelViewSet&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThingViewSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelViewSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThingSerializer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;queryset&lt;/code&gt; – список, срез объектов запрошенных из БД. &lt;code class=&quot;highlighter-rouge&quot;&gt;Thing.objects.all()&lt;/code&gt;- в данном случае запрашиваем все доступные. Можем также использовать фильтрацию: &lt;code class=&quot;highlighter-rouge&quot;&gt;Thing.objects.filter(&amp;lt;название поля в models&amp;gt;=&amp;lt;значение&amp;gt;)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;serializer_class&lt;/code&gt; – привязываем наш сериализатор (импортируя его из &lt;code class=&quot;highlighter-rouge&quot;&gt;serializers.py&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Для корректной работы нашего представления, нам осталось пробросить к нему URL, чтобы запросы клиента попадали в наше представление (вьюху) через URL. Для этого, в основном файле проекта &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; (находится на одном уровне с &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;), делаем связность urls с urls из каталога &lt;code class=&quot;highlighter-rouge&quot;&gt;api\&lt;/code&gt;, добавляя в список &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns[…]&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'api/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;директория с приложением&amp;gt;.api.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Теперь, при обращении к адресу &lt;code class=&quot;highlighter-rouge&quot;&gt;..api/&lt;/code&gt;, запрос пользователя будет перенаправлен в &lt;code class=&quot;highlighter-rouge&quot;&gt;api\urls.py&lt;/code&gt; .
Ну и наконец, в каталоге &lt;code class=&quot;highlighter-rouge&quot;&gt;api\&lt;/code&gt; в &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; делаем привязку к нашему представлению, добавляя в список &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns[…]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^thing/$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThingViewSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ThingViewSet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;В итоге, обратившись по адресу:&lt;code class=&quot;highlighter-rouge&quot;&gt; ../api/thing/&lt;/code&gt;, мы получим список полей из нашей модели. Также мы можем получить данный список в JSON формате, сделав запрос вида: &lt;code class=&quot;highlighter-rouge&quot;&gt;../api/thing/?format=json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;В данной статье рассмотрен самый простой способ “поднять” REST API в своем приложении с минимальным функционалом. Для полноценного взаимодействия, чтобы клиент мог делать изменения, обновлять и удалять данные, то есть операции Create, Read, Update, Delete (CRUD), необходимо переопределять родительские методы класса &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelViewSet&lt;/code&gt;, и добавлять соответствующий функционал в &lt;code class=&quot;highlighter-rouge&quot;&gt;ThingSerializer&lt;/code&gt;. Но об этом в другой раз.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Знакомство с REST.</title>
   <link href="http://localhost:4000/2020/04/12/Django-REST/"/>
   <updated>2020-04-12T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/04/12/Django-REST</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-04-12/rest_api.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На сегодняшний день всемирная сеть интернет использует модель “клиент-серверного” взаимодействия. Клиент отправляет запрос — сервер ему отвечает. Общение браузеров и веб-сайтов (первые выступают в роли клиента, а вторые в роли сервера) происходило при помощи html-рендеринга, и HTTP протокола.&lt;/p&gt;

&lt;p&gt;Чтобы получить данные с веб-сайта, браузер отправляет запрос GET к серверу. Сервер формирует ответ в виде html-страницы и передает ее браузеру. В этой самой html-странице сервер заложил все необходимые веб-формы, заполнив которые, пользователь мог бы передать свои данные обратно на сервер. Когда мы ввели свои данные в форму на сайте, браузер отправляет серверу запрос POST, в котором содержатся наши данные, а сервер обрабатывает их и записывает в базу данных.&lt;br /&gt;
Но, с течением времени такая схема взаимодействия перестала удовлетворять постоянно растущие требования к веб-разработке. Интернет проникает в нашу жизнь все глубже и глубже. Интеграция с всемирной сетью происходит все сильнее. На данный момент емкость протокола IPv4 исчерпана. На смену ему приходит IPv6, что говорит о том, что в будущем, практически, каждая лампочка может иметь свой собственный IP-адрес и подключаться к интернет (internet of things, IoT).&lt;br /&gt;
Итак, появление мобильных приложений, различных устройств с доступом в интернет, привело к тому, что для них уже не подходил стандартный способ html-рендеринга на сервере, ведь теперь каждому клиенту нужно было отрисовать данные по-своему.&lt;/p&gt;

&lt;p&gt;Для всех этих задач есть другой способ обмена данными — Web &lt;strong&gt;API&lt;/strong&gt; (Application Programming Interface). Смысл этого способа в том, что сервер передает клиенту не html-страницу, а непосредственно данные, никак не влияя на то, как эти данные будут в итоге представлены. Наиболее популярными форматами для передачи данных становятся XML и JSON. Таким образом, сервер полностью избавляется от задачи отрисовки данных. Постепенно Web API стал приобретать все большую популярность. Этому способствовало быстрое развитие инструментов на языке JavaScript, а также появление различных веб-фреймворков.&lt;br /&gt;
Браузерные приложения научились отрисовывать веб-страницы самостоятельно, получая чистые данные с сервера. Веб-приложения на сервере научились создавать API быстро и легко. Так сформировалась четкое разделение на &lt;strong&gt;Backend&lt;/strong&gt; и &lt;strong&gt;Frontend&lt;/strong&gt; разработку: тех, кто поддерживает приложение на сервере, и тех, кто делает браузерные (клиентские) приложения. А Web API стал универсальным способом общения для сервера и всех его клиентов (браузеров, мобильных приложений, других серверов).&lt;br /&gt;
Со временем становилось понятно, что необходим некий стандарт, который охватит все тонкости в общении между компонентами (как передавать данные, в каком формате, как сообщать об ошибках), ведь на простых договоренностях между разработчиками далеко не уедешь. И таким стандартом стала архитектурная модель взаимодействия компонентов – REST.&lt;/p&gt;

&lt;p&gt;Representational State Transfer (&lt;strong&gt;REST&lt;/strong&gt;) для управления данными использует привязку к стандартным методам HTTP-протокола. Существует несколько стандартных действий для работы с данными — это Create, Read, Update, Delete (CRUD).&lt;/p&gt;

&lt;p&gt;• Create - соответствует HTTP методу POST&lt;br /&gt;
• Read — соответствует HTTP методу GET&lt;br /&gt;
• Update — соответствует HTTP методу PUT&lt;br /&gt;
• Delete — соответствует HTTP методу DELETE&lt;/p&gt;

&lt;p&gt;На сегодняшний день, наверное, каждый язык программирования для веб-разработки имеет в своем арсенале фреймворк REST-API.
REST не обошел стороной и Django. Благодаря чему на сегодняшний день мы имеем библиотеку Django REST Framework, подключаемую при помощи:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;djangorestframework&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/image/post-2020-04-12/rest.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;В написании данной статьи использовались материалы из источника: https://mkdev.me/posts/chto-takoe-django-rest-framework&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django. Стоп, контроль!</title>
   <link href="http://localhost:4000/2020/04/01/Django-stop-control/"/>
   <updated>2020-04-01T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/04/01/Django-stop-control</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-04-01/stop-control2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для большинства современных веб-приложений наличие механизма аутентификации пользователя является обязательным условием. 
Но, для начала давайте поймем разницу между такими, казалось бы, похожими понятиями, как идентификация, аутентификация и авторизация.&lt;br /&gt;
Итак, &lt;strong&gt;Идентификация&lt;/strong&gt; — это процесс определения, что за пользователь перед нами. &lt;strong&gt;Аутентификация&lt;/strong&gt; — это процесс подтверждения, что этот пользователь именно тот, за кого себя выдает, то есть, процесс сопоставления переданных данных от пользователя с существующими учетными данными в БД. &lt;strong&gt;Авторизация&lt;/strong&gt; — это процесс принятия решения о том, что именно этой аутентифицированной персоне разрешается делать, то есть, назначение прав пользователю для разграничения доступа к ресурсам.&lt;br /&gt;
В Django имеется встроенный функционал для реализации процесса аутентификации и авторизации. Этим самым “готовым кубиком” служит приложение &lt;code class=&quot;highlighter-rouge&quot;&gt;auth&lt;/code&gt; из &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth&lt;/code&gt;. 
Что бы работал сам механизм аутентификации и авторизации пользователя, необходимо изначально в моделях (models) использовать для создания пользователя встроенный в Django класс &lt;strong&gt;User&lt;/strong&gt;, и уже при необходимости наследовать от него свои пользовательские классы. Именно в стандартном встроенном классе User реализована механика взаимодействия при аутентификации и авторизации. &lt;br /&gt;
Приложение аутентификации Django предоставляет следующие функциональные возможности из «коробки»:&lt;/p&gt;

&lt;p&gt;•	Класс авторизации &lt;code class=&quot;highlighter-rouge&quot;&gt;LoginView&lt;/code&gt;&lt;br /&gt;
•	Класс выхода &lt;code class=&quot;highlighter-rouge&quot;&gt;LogoutView&lt;/code&gt;&lt;br /&gt;
•	Сброс пароля &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordResetView&lt;/code&gt;&lt;br /&gt;
•	Смена пароля &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordChangeView&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Нам нужно только предоставить шаблоны для реализации этих функций в нашем приложении.
Все примеры, описанные ниже, относятся к версии Django 3 и выше.&lt;/p&gt;

&lt;p&gt;Для начала, подготовим необходимый шаблон для прохождения процесса аутентификации. Проще говоря, форму, куда будут вноситься пользовательские данные username и password. Создадим директорию в корне нашего проекта: &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/registration&lt;/code&gt;, а внутри &lt;code class=&quot;highlighter-rouge&quot;&gt;registration&lt;/code&gt; создаем два шаблона &lt;code class=&quot;highlighter-rouge&quot;&gt;login.html&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;logged_out.html&lt;/code&gt; для “залогинивания” и “разлогинивания” соответственно.&lt;br /&gt;
Для того, чтобы все корректно работало, внутри директории &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/&lt;/code&gt;(если он еще не создан) добавим еще один файл &lt;code class=&quot;highlighter-rouge&quot;&gt;base_generic.html&lt;/code&gt; с содержимым:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  {% block title %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Local Library&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;{% endblock %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  {% block sidebar %}
  {% if user.is_authenticated %}
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;User: {{ user.get_username }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url 'logout'%}?next={{request.path}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   {% else %}
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url 'login'%}?next={{request.path}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Login&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   {% endif %}
  {% endblock %}
  {% block content %}&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- default content text (typically empty) --&amp;gt;&lt;/span&gt;{% endblock %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Далее, с учетом расширения &lt;code class=&quot;highlighter-rouge&quot;&gt;base_generic.html&lt;/code&gt;, создадим &lt;code class=&quot;highlighter-rouge&quot;&gt;login.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% extends &quot;base_generic.html&quot; %}
{% block content %}
  {% if form.errors %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Your username and password didn't match. Please try again.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  {% endif %}  
  {% if next %}
    {% if user.is_authenticated %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Your account doesn't have access to this page. To proceed,
      please login with an account that has access.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% else %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Please login to see this page.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}
  {% endif %}  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url 'login' %}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {% csrf_token %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.username.label_tag }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.username }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.password.label_tag }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.password }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ next }}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;  
  {# Assumes you setup the password_reset view in your URLconf #}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url 'password_reset' %}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Lost password?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt; 
{% endblock %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;И, соответственно, &lt;code class=&quot;highlighter-rouge&quot;&gt;logged_out.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% extends &quot;base_generic.html&quot; %}
{% block content %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Logged out!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url 'login'%}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click here to login again.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
{% endblock %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Далее установим параметр редиректа (перенаправления) после удачной аутентификации пользователя. Для этого в файле &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; добавим параметр:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOGIN_REDIRECT_URL = '/'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'/'&lt;/code&gt; – означает, что будет произведен редирект на главную страницу сайта.
Затем, делаем связывание пути и представления (вьюхи), которое будет отрабатывать саму логику аутентификации. В основном файле &lt;code class=&quot;highlighter-rouge&quot;&gt;rls.py&lt;/code&gt;, который находится на одном уровне с  &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;. свяжем адрес &lt;code class=&quot;highlighter-rouge&quot;&gt;accounts/&lt;/code&gt;, и встроенное представление для аутентификации - &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.urls&lt;/code&gt;, которое и будет отвечать за всю дальнейшую логику, своего рода “черный ящик”:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'accounts/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'django.contrib.auth.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Тем самым, пройдя по ссылке ..&lt;code class=&quot;highlighter-rouge&quot;&gt;/accounts/login/&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.urls&lt;/code&gt; обратится в директорию &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/registration&lt;/code&gt; за поиском шаблона &lt;code class=&quot;highlighter-rouge&quot;&gt;login.html&lt;/code&gt; для отображения, который мы предусмотрительно заранее создали. 
Запускаем наш локальный сервер (manage.py runserver) и проверяем работу.&lt;br /&gt;
Аналогичным образом можно реализовать возможности выхода (logged_out) и смены пароля (Password_Change).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django, приятно познакомиться.</title>
   <link href="http://localhost:4000/2020/03/25/Django/"/>
   <updated>2020-03-25T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/03/25/Django</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/post-2020-03-25/django1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;Django&lt;/strong&gt; – очень мощный, обширный и, наверное, один из самых популярных веб-фреймворков современности. Развивался, как open-source проект, был назван в честь джазового гитариста Джанго Рейнхардта и получил релиз в 2005 году.
Данный фреймворк дает очень широкие и гибкие возможности для проектирования веб-проектов различной сложности.&lt;/p&gt;

&lt;p&gt;Если очень кратко описать основную суть Django, то, на мой взгляд, это будет выглядеть следующим образом. Django имеет такую структуру проектирования, которая позволяет разграничить зоны ответственности фронтенда и бэкенда, и эффективно взаимодействовать в рамках классической концепции &lt;strong&gt;MVC&lt;/strong&gt; (Model, View, Controller) или, в случае с самим Django – &lt;strong&gt;MVT&lt;/strong&gt; (Model, View, Template). Иными словами, дизайнер и программист больше не мешают друг другу. Бэкенд логика не перемешана с элементами верстки страницы, как, например, в PHP.&lt;br /&gt;
Если описывать очень просто, то механизм работы следующий. Данные запроса от клиента-пользователя (request) идут, как по конвейеру: обрабатывается адрес (url), затем подставляется необходимое представление для данного url. Непосредственно представление (view) несет в себе саму логику бэкенда, которая взаимодействует с базой данных посредством моделей (models) и выводит результат, подставляя полученные данные в шаблон (template) для отрисовки в браузере клиента. &lt;br /&gt;
Все это, конечно же, взаимодействует по “клиент – серверной” модели, используя HTTP протокол.&lt;/p&gt;

&lt;p&gt;Разработка проекта на Django концептуально основывается на принципе DRY (Don’t repeat yourself), что означает, не повторяй, то что уже есть, и сравнимо со строительством из компонентов, как из кубиков. А этих «кубиков» сам фреймворк имеет огромное множество в виде подключаемых модулей и библиотек.&lt;/p&gt;

&lt;p&gt;Также, стоит еще отметить встроенный механизм &lt;strong&gt;ORM&lt;/strong&gt; (Object, Relating, Mapping). Данный API позволяет, как бы, наложить или связать сущности языка программирования (в данном случае Python) с логикой базы данных (PostgreSQL, MySQL, SQLite и Oracle). Таким образом, механизм ORM заключает в себе процесс наложения полей models в Django с полями БД, совмещая это с логикой работы самой базы данных. Вся механика взаимодействия с БД скрыта “под капотом” models в Django.&lt;/p&gt;

&lt;p&gt;Данный веб-фреймворк может использоваться со множеством сторонних приложений, в зависимости от целей и потребностей разрабатываемого проекта. За время своего существования, Django постоянно совершенствуется и изменяется. На момент написания данной статьи, Django считается лучшим фреймворком, написанным на Python для веб-разработки, который должен стать обязательным к изучению всем веб-разработчикам, начинающим и не только.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Идем в машинное отделение.</title>
   <link href="http://localhost:4000/2020/02/17/go-to-stage-down/"/>
   <updated>2020-02-17T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/02/17/go-to-stage-down</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/image/machine4.JPG&quot; alt=&quot;&quot; /&gt;
Изучая языки программирования (в школе – Pascal, в университете, в рамках образовательной программы – C++, на данный момент - Python), я всегда задавался вопросом: “а как оно все происходит там, уровнем ниже, в машинном отделении, так сказать?” Ведь одно дело учить синтаксис и команды высокоуровневого языка программирования интуитивно понятные человеку, а другое – хотя бы в общих чертах представлять, как все устроено там, “под капотом”. 
Если мы спустимся на “этаж” ниже от привычного нам уровня приложений, с понятным нам интерфейсом, то первым, в чем предстоит нам разобраться – это взаимодействие памяти и процессора. Конечно, погружаться очень глубоко в данный вопрос, в рамках данной статьи, я не стану, но в общих чертах попробую описать, как понимаю это я. 
Допустим, мы написали код некоторой программы. Наш код скомпилировался в &lt;strong&gt;исполняемый файл&lt;/strong&gt; (.EXE для семейства ОС Windows). Структуру готового исполняемого файла я привел ниже:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/exe-struct.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Как мы видим, EXE файл представляет собой несколько сегментов с разным назначением. Данная структура делит нашу программу на сегмент данных и сегмент кода.&lt;br /&gt;
&lt;strong&gt;Память&lt;/strong&gt; (ОЗУ) – это последовательность байт. Доступ к памяти (ячейкам) может осуществляться как к одному непрерывному массиву (модель &lt;strong&gt;flat&lt;/strong&gt;), или как к нескольким массивам (&lt;strong&gt;сегментированная модель&lt;/strong&gt;).
Итак, что же происходит при запуске программы? Операционная система (ОС) выделяет необходимый объем памяти. Другими словами – создается &lt;strong&gt;процесс&lt;/strong&gt;, то есть выделяются и разграничиваются ресурсы. Затем ОС загружает в выделенную область памяти нашу программу, которая представляет из себя, как мы уже знаем, сегменты данных и команд (инструкций). Далее происходит передача управления нашей программе, то есть выполнение инструкций. Другими словами, создается &lt;strong&gt;поток&lt;/strong&gt;.&lt;br /&gt;
Поток использует ресурсы процесса и определяет последовательность исполнения кода в соответствующем сегменте.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/flow.jpg&quot; alt=&quot;&quot; /&gt;
Внутри одного процесса может быть несколько потоков и выполняться они могут параллельно. Например, всем известная функция main() запускает главный поток. Остальные потоки запускаются (создаются) при помощи других функций по мере необходимости и усмотрению программиста при написании кода.
При загрузке процесса в ОЗУ формируется адресное пространство этого процесса, которое состоит из различных сегментов. Ниже на схеме, я попытался доступно это отразить:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/memory_process.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь мы немного представляем, как устроена организация ресурсов памяти выделенной под конкретный процесс. Но как происходят непосредственно операции - вычисления над данными, которые там хранятся? Иначе говоря, мы рассмотрели структуру склада данных, но еще не видели организацию цеха по переработке этих данных :) Представленная ниже схема – архитектура ЭВМ, она очень упрощена для удобства понимания в рамках данной статьи:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/EVM-architekt.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Итак, наша программа записывается в ОЗУ, далее она частями считывается и значения, которые требуют обработки (каких либо вычислений), посредством системной шины, поступают в &lt;strong&gt;кэш-память&lt;/strong&gt; процессора (CPU). Да, помимо ОЗУ, у процессора есть своя память, которая намного меньше по объему, но гораздо (во много раз) быстрее ОЗУ. Так сказать, процессор имеет свой собственный сверхбыстрый буфер, имеющий разные уровни (L1, L2, L3). Дальнейшие операции производятся при помощи регистров процессора. Дело в том, что процессор работает только с собственными регистрами. Напрямую с ОЗУ он не взаимодействует. Сегмент кода (инструкций) из нашей программы, говорит процессору какую операцию необходимо применить над значениями, которые были записаны в соответствующие регистры. Все идущее ниже по тексту, будет рассмотрено на примере архитектуры процессоров семейства &lt;strong&gt;x86&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Регистры процессора&lt;/strong&gt; – специальное место (ячейки памяти внутри процессора), где хранятся значения, записанные из программы (ОЗУ), при помощи системной шины, для которых необходимо сделать какие-либо вычисления.
После включения, процессор находится в режиме &lt;strong&gt;реальной адресации&lt;/strong&gt;. Это режим, при котором любому процессу доступна вся память компьютера. При загрузке операционной системы, ОС переводит процессор в &lt;strong&gt;защищенный режим&lt;/strong&gt;, при котором доступ к ресурсам для различных процессов разграничиваются и контролируются самой ОС.
Бит – минимальная единица информации, которой оперирует процессор. 1 байт = 8 бит и это составляет 1 “слово”. Итак, 1 слово = 8 бит = 1 байт или 2^8 = 256 значений. Существуют также двойные слова и т.д.&lt;br /&gt;
2 слова = 2^16 = 65 535 &lt;br /&gt;
3 слова = 2^32 = 4 294 967 295&lt;br /&gt;
Байт, слово, двойное слово – это основные типы данных процессора. Для представления знака (отрицательное или положительное число) используется инверсия всех бит, а затем ко всем полученным битам прибавляется 1.
Для операций с плавающей точкой используется специальное устройство (&lt;strong&gt;FPU&lt;/strong&gt;) внутри основного процессора с собственными регистрами и набором команд.&lt;/p&gt;

&lt;p&gt;По назначению регистры процессора различаются на:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;аккумулятор — используется для хранения промежуточных результатов арифметических и логических операций и инструкций ввода-вывода;&lt;/li&gt;
  &lt;li&gt;флаговые — хранят признаки результатов арифметических и логических операций;&lt;/li&gt;
  &lt;li&gt;общего назначения — хранят операнды арифметических и логических выражений, индексы и адреса;&lt;/li&gt;
  &lt;li&gt;индексные — хранят индексы исходных и целевых элементов массива;&lt;/li&gt;
  &lt;li&gt;указательные — хранят указатели на специальные области памяти (указатель текущей операции, указатель базы, указатель стека);&lt;/li&gt;
  &lt;li&gt;сегментные — хранят адреса и селекторы сегментов памяти;&lt;/li&gt;
  &lt;li&gt;управляющие — хранят информацию, управляющую состоянием процессора, а также адреса системных таблиц.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Кроме того, процессор содержит наборы команд и инструкций. Например, расширения &lt;strong&gt;MMX&lt;/strong&gt; - это встроенный набор дополнительных инструкций для более эффективной работы с большим потоком данных (изображения, видео, звук). По сути, это несколько новых типов данных, регистров и команд для повышения производительности.&lt;br /&gt;
Таким образом, данные, требующие обработки, поступают в регистры процессора. Процессор производит над ними, в виде машинных слов, необходимые операции и возвращает полученные значения обратно программе, которая, в свою очередь, взаимодействует с пользователем.&lt;/p&gt;

&lt;p&gt;Итак, если очень упрощенно и простыми словами описать, что происходит с программой после ее запуска, то, пожалуй, на этом можно остановиться. Также хочу отметить, что в данной статье я рассмотрел пример программы написанной на &lt;strong&gt;компилируемом&lt;/strong&gt; языке программирования (например, C, C++). То есть сформированный после компиляции машинный код, будет зависим от процессора (платформы), для которого он, собственно, и подготовлен (скомпилирован). Для &lt;strong&gt;итерпретируемого&lt;/strong&gt; языка программирования (например Python) все будет выглядеть несколько иначе. Сам шаг компиляции там отсутствует, как таковой. Инструкции не исполняются целевым процессором, а считываются и исполняются другой программой (которая обычно написана на языке целевого процессора). Но, об этом я, возможно, напишу в следующих статьях.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Точка старта. Когда ты понимаешь, что твои знания равны нулю)</title>
   <link href="http://localhost:4000/2020/01/23/start-point/"/>
   <updated>2020-01-23T00:00:00+03:00</updated>
   <id>http://localhost:4000/2020/01/23/start-point</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;\image\start-point2.jpeg&quot; alt=&quot;drawing&quot; width=&quot;2000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В самом первом своем посте я озвучил достаточно мотивационный призыв, типа только вперед, только развитие, ни шагу назад! Но, все-таки, надо отдавать себе отчет, и понимать с какими техническими знаниями, так сказать, «скилл левелом» я начинаю свой путь?&lt;/p&gt;

&lt;p&gt;Если говорить, что программирование я начал изучать в свои 30+ лет совсем с нуля - значит немного слукавить:) Программированием я начал увлекаться еще в школьные годы (тогда это был Pascal). Затем поступил и учился в Волгоградском Техническом Университете, на специальности «автоматизация и управление». Все это, так или иначе, косвенно касалось программирования, но все-же главная тема, немного проходила мимо. После окончания Университета, устроившись на работу в компанию сотовой связи инженером, о программировании пришлось забыть на многие годы.&lt;/p&gt;

&lt;p&gt;До написания данного поста, мне пришлось какое-то время потратить на усиленное погружение в то, что было забыто за долгие годы, и наращивать свои умения, а также развивать кругозор в сопутствующих технологиях.&lt;/p&gt;

&lt;p&gt;Наверное, самым сложным для меня на подготовительном этапе был выбор языка программирования. Ранее я уже имел поверхностное знакомство с С++ и Java, но хотелось чего-то более модного и современного, чтобы погрузиться в него с нуля. Выбор пал на Python:) Одним из плюсов, конечно-же, стал более низкий порог входа для изучения данного языка, будем говорить начистоту, питончик - очень многое уже содержит «под капотом», то что, скажем, на C++ пришлось бы реализовывать руками. Ну и модные тенденции IT мира также сделали свое дело:) 
Я считаю, что гнаться за изучением сразу нескольких языков (а вдруг пригодится) не стоит. Лучше разобраться в одном, но очень хорошо, не распыляться. Разумеется, что потом со временем, скорее всего, ситуация заставит меня знать несколько языков. Но на данном этапе, пока этого не требуется.&lt;/p&gt;

&lt;p&gt;Вобщем, с языком я определился. Далее последовало погружение в Python. Для меня стояла задача развить способность уверенно писать код и, конечно же, минимизировать количество ошибок в нем. Я практиковался по 4-5 часов в день на не очень сложных олимпиадных задачках по программированию. Затем приступил к классике: алгоритмам и структурам данных, попутно вникая в принципы ООП. Очень хорошим «проводником» в алгоритмы для меня, как новичка, стала книга &lt;a href=&quot;https://www.chitai-gorod.ru/catalog/book/960907/&quot;&gt;Адитья Бхаргава «Грокаем алгоритмы»&lt;/a&gt;. Очень скоро пришло понимание того, что свой код нужно уметь верифицировать. Пришлось поразбираться с библиотечкой unittest. Вообще, я считаю, разработчик должен выдавать максимально верифицированный и читаемый код после себя, - это признак не только хорошего уровня мастерства, но и хорошего тона. Ведь поддерживать и масштабировать твой код возможно придется кому-то другому.&lt;/p&gt;

&lt;p&gt;Как и большинство людей, изначально я был пользователем ОС Windows, и все мое окружение для программирования также было установлено под эту ОС. Но с расширением своих познаний, я обратил внимание и на другие платформы (Mac, iOS, Android, Linux и ряд других ОС), и хорошо бы знать, хотя бы поверхностно, некоторые из них, ведь под эти платформы также пишется масса софта. Поэтому, для первого шага в этом направлении, пришлось установить второй системой Linux и заставить себя пересесть на нее, подняв все необходимое для моего обучения окружение. На Линуксе, кстати, это сделать проще и быстрее:)&lt;/p&gt;

&lt;p&gt;Ну раз Python, то, скорее всего, дорога моя лежит в backend - подумал я, и начал интересоваться Web-разработкой, что это и как все взаимодействует, какие технологии применяются, как вообще устроена структура индустрии разработки софта. Кто такие Архитектор, Менеджер, Тим-Лидеры. Какие бывают методологии разработки (agile-подходы). Как взаимодействуют между собой разработчики (developers), тестировщики (quality assessors ), а также отдел support-a который обеспечивает обратную связь от пользователей по выпущенному программному продукту.&lt;/p&gt;

&lt;p&gt;Конечно у меня, в силу своей многолетней работы в технической индустрии сотовой связи, уже есть кое-какое понимание сетей связи, протоколов (в частности IP), коммутации, маршрутизации и т.д. Эти знания мне помогают в данном аспекте моего обучения, но все же косвенно.&lt;/p&gt;

&lt;p&gt;Итак, вернемся к Web. Ну раз Web - значит пришлось изучать механизм HTTP запросов, а также знакомиться и тренироваться с микрофреймворком Flask, изучать основы баз данных - ведь backend без использования БД никуда - ни в файлах же хранить информацию:) Как вытекающее из баз данных, пришлось изучить и разобраться на практике с основными моментами языка запросов SQL. А также c еще множеством разных сопутствующих тем и технологий таких как: работа с регулярными выражениями, синтаксис командной строки, система контроля версий Git и многое другое.&lt;/p&gt;

&lt;p&gt;К отдельной теме, или ветке своего развития, я отнес бы изучение Machine Learning. И питончик тут пригодился, как нельзя кстати:) На данный момент ML - это достаточно перспективная, и бурно развивающаяся отрасль IT индустрии. Игнорировать современные тенденции нельзя, иначе можно всю жизнь посвятить изучению различных вебфреймворков, но прогресс уйдет без тебя. Конечно, на данный момент с нуля написать руками нейросеть, нормализовать из сырых данных  необходимый dataset - я не смогу, но использовать популярные фреймворки, такие как Pandas, PyTorch или Fast.ai (ну и, конечно же, Гугл в помощь:) для решения несложных задач по распознаванию или классификации изображений вполне в состоянии. В этом направлении также стараюсь развиваться.&lt;/p&gt;

&lt;p&gt;И вот, после всего, что я изучил, и тех знаний, которые имею на данный момент - все это показывает, насколько велика вся эта индустрия и насколько мои знания малы, по сравнению с тем, что еще нужно постичь и изучить. И поэтому, мою данную позицию на пути в IT можно назвать точкой отсчета:)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Pages.GitHub и Jekyll</title>
   <link href="http://localhost:4000/2019/12/26/blog-building/"/>
   <updated>2019-12-26T00:00:00+03:00</updated>
   <id>http://localhost:4000/2019/12/26/blog-building</id>
   <content type="html">&lt;p&gt;И первую свою статейку, хочу посвятить собственно тому, как я реализовал данный функционал ведения своего блога при помощи площадки 
&lt;a href=&quot;https://pages.github.com/&quot;&gt;pages.github&lt;/a&gt; и генератора статических сайтов &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;
(На статических сайтах контент обновляется вручную путем правки кода).&lt;/p&gt;

&lt;p&gt;Хотя я приучаюсь пользоваться Linux, и в большинстве случаев стараюсь все делать именно из под нее, 
в этот раз я решил поднимать данный блог используя Windows. Но в итоге процесс установки и поднятия необходимого 
софта затянулся на пару дней:) &lt;br /&gt;
Подробно описывать процесс установки необходимого окружения, я не стану, благо в сети есть масса подробных инструкций. 
Я, например, использовал вот &lt;a href=&quot;https://gosha20777.github.io/blog/github/jekyll/2017/01/28/blog-with-github/&quot;&gt;эту.&lt;/a&gt; &lt;br /&gt;
Могу сказать, что проблем было не мало. Лично для меня было непросто разобраться, как «запилить» под себя уже готовые шаблоны для jekyll. 
Много времени потратил, на визуализацию готовой странички. Пришлось много гуглить и вспоминать HTML/CSS. &lt;br /&gt;
Но когда все заработало локально, оставалось только «запушить» все в заранее готовый репозиторий на GitHub.&lt;/p&gt;

&lt;p&gt;И вот теперь, наконец-то, все заработало :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Мой Блог. Начало.</title>
   <link href="http://localhost:4000/2019/12/25/my_first_steps/"/>
   <updated>2019-12-25T00:00:00+03:00</updated>
   <id>http://localhost:4000/2019/12/25/my_first_steps</id>
   <content type="html">&lt;p&gt;Данный блог посвящен статьям и заметкам о моих шагах в освоении нелегкого пути, под названием “дорога в программирование”. 
Тут я постараюсь делиться, теми моментами, с которыми я сталкивался и столкнусь на своем пути развития.&lt;/p&gt;

&lt;p&gt;Все мы помним те времена, когда записывали конспекты лекций. Каждый пишет конспект так, как понятно ему, как нравится ему и как он сам воспринимает и усваивает материал. Мои статьи, тоже, своего рода, “конспект”. Конспект тех навыков и знаний, с которыми я сталкиваюсь и которые приобретаю на своем пути развития. Материал представлен именно в той форме, в которой понятен, прежде всего, мне. Ну а я, в свою очередь, попытаюсь донести его содержание максимально доступно для читателей моего блога.&lt;/p&gt;

&lt;p&gt;В силу того, что я занимался легкой атлетикой, и вообще люблю спорт, думаю название моего блога, более чем, оправдано. Марафон – это длительный забег, где важным критерием служит не только характеристики выносливости, но и стратегия. &lt;br /&gt;
IT-марафон в моей жизни, тоже своего рода очень длительный “забег”, со своей стратегией в плане развития, а также выносливостью держать этот постоянно растущий темп изучения новых технологий.&lt;/p&gt;

&lt;p&gt;Я считаю, что развиваться надо всегда и непрерывно на протяжении всей жизни. 
Не нужно расчитывать на завтрашний день, в нашем распоряжении существует только сегодня, здесь и сейчас.&lt;br /&gt;
И начать свой “марафон” никогда не поздно, главное – только вперед, через трудности и боль к лучшей версии себя!&lt;/p&gt;

</content>
 </entry>
 

</feed>
