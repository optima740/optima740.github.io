I"L9<p><img src="/image/post-2020-04-15/zamok1.jpg" alt="" /></p>

<p>Как мы уже ранее говорили, <strong>Аутентификация</strong> — это процесс подтверждения, что пользователь именно тот, за кого себя выдает, то есть, процесс сопоставления переданных данных от пользователя с существующими учетными данными в БД. <br />
<strong>Авторизация</strong> — это процесс принятия решения о том, что именно этой аутентифицированной персоне разрешается делать, то есть, назначение прав пользователю для разграничения доступа к ресурсам. И, как раз, об ограничении доступа сегодня и пойдет речь.</p>

<p>Допустим в нашем проекте или приложении необходимо разграничить доступ различным пользователям к ресурсам. Например, у нас есть автотранспортные предприятия. У каждого предприятия есть свои сотрудники – пользователи. За каждым предприятием закреплены свои автомобили. Соответственно, мы создали модели предприятий, модели пользователей и модели автомобилей с соответствующими связями между таблицами БД. И нам нужно сделать так, чтобы сотрудник (пользователь) закрепленный за своим предприятием мог получить доступ к списку автомобилей только своего предприятия.<br />
В данном случае удобно (дабы не изобретать велосипед) использовать стандартный функционал Django «из коробки», а именно использовать стандартный класс <strong>User</strong> для создания моделей сотрудников. Например, наши пользовательские классы <code class="highlighter-rouge">Driver</code> и <code class="highlighter-rouge">Manager</code>, мы сделаем наследниками класса User.</p>

<p>Ограничение доступа можно cделать на уровне представлений (<code class="highlighter-rouge">views.py</code>). Самый простой способ это реализовать – использовать модуль <code class="highlighter-rouge">django.contrib.auth</code>.<br />
Тут стоит сделать уточнение, если наше view представляет из себя функцию, то для авторизации следует использовать соответствующий декоратор <code class="highlighter-rouge">@login_required</code>, предварительно импортировав его:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">login_required</span>

<span class="o">@</span><span class="n">login_required</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    
    <span class="o">...</span>
</code></pre></div></div>
<p>Мы знаем, что декоратор проверяет условие (контракт) до того, как функция, обернутая в этот декоратор, будет выполнена. Поэтому с  <code class="highlighter-rouge">login_required</code> логика следующая:</p>

<p>Если пользователь не авторизован, то будет перенаправлен на URL, указанный в параметре конфигурации <code class="highlighter-rouge">settings.LOGIN_URL</code>, передавая текущий абсолютный путь в запросе. <br />
Если пользователь авторизован, то выполняет код представления (view). В коде представления не требуется выполнять проверку авторизован ли пользователь или нет.</p>

<p>В случае, если наше представление организовано в виде класса, тогда нам понадобиться соответствующий миксин <code class="highlighter-rouge">LoginRequiredMixin</code>. Импрортируем его из <code class="highlighter-rouge">django.contrib.auth.mixins</code>. Мы должны включить (подмешать) данный миксин в список наследования класса нашего представления. Кроме того, в теле класса мы должны переопределить стандартное поле данного миксина: <code class="highlighter-rouge">raise_exeption = True</code>, для случая, если пользователь не авторизован. Для него будет выброшена ошибка 403.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib.auth.mixins</span> <span class="kn">import</span> <span class="n">LoginRequiredMixin</span>

<span class="k">class</span> <span class="nc">MyView</span><span class="p">(</span><span class="n">LoginRequiredMixin</span><span class="p">,</span> <span class="n">generics</span><span class="o">.</span><span class="n">ListAPIView</span><span class="p">):</span>
	
    <span class="o">...</span>
    <span class="n">raise_exception</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>
<p>Логика работы данного миксина (класса) схожа с логикой рассмотренного ранее декоратора:</p>

<p>Если пользователь авторизован, срабатывает редирект на указанный в параметре конфигурации <code class="highlighter-rouge">settings.LOGIN_URL</code>. Иначе, пользователь получает ошибку 403.<br />
На самом деле, модуль <code class="highlighter-rouge">auth из django.contrib</code> имеет гораздо больший функционал, помимо того, что был описан в данной статье. И его рассмотрение, тема для отдельного поста. Но в рамках сегодняшней задачи, мы достаточно просто и быстро добились необходимого. <br />
Таким образом, мы добиваемся того, что логика работы view будет ограничена проверкой, является ли пользователь аутентифицированным. Что позволяет нам добиться ограничения выполнения кода внутри view.</p>

<p>Мы описали только половину того, как можно решить нашу задачу. Напомню, нам необходимо, чтобы авторизованный пользователь (например, Manager) получал список именно тех автомобилей, которые принадлежат его предприятию. <br />
Допустим, текущий пользователь авторизован и код внутри views будет выполнен. Таким образом, нам необходимо отфильтровать для данного авторизованного пользователя те автомобили, которые соответствуют его предприятию.<br />
Данные о текущем пользователе можно получить из переменной <code class="highlighter-rouge">request</code>, которая автоматически передается при вызове view. Если мы используем функции в качестве представлений, то можно просто указать <code class="highlighter-rouge">request</code> в качестве входного параметра, и обращаться к ней внутри функции:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="n">user</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">username</span>
    <span class="o">...</span>
</code></pre></div></div>
<p>Если в качестве организации наших представлений использованы классы, то придется переопределять родительский метод, для того чтобы получить доступ к <code class="highlighter-rouge">self.request</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">..models</span> <span class="kn">import</span> <span class="n">Car</span><span class="p">,</span> <span class="n">Enterprise</span><span class="p">,</span> <span class="n">User</span><span class="p">,</span> <span class="n">Manager</span>


<span class="k">class</span> <span class="nc">CarListView</span><span class="p">(</span><span class="n">LoginRequiredMixin</span><span class="p">,</span> <span class="n">generics</span><span class="o">.</span><span class="n">ListAPIView</span><span class="p">,</span> <span class="n">ListModelMixin</span><span class="p">):</span>
    <span class="c1"># визуализатор list для модели Car
</span>    <span class="k">def</span> <span class="nf">get_queryset</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">user_name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">username</span>
        <span class="n">enterprise</span> <span class="o">=</span>    <span class="n">Enterprise</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">manager__username__contains</span><span class="o">=</span><span class="n">user_name</span><span class="p">)</span>
        <span class="n">list_car</span> <span class="o">=</span> <span class="n">Car</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">of_enterprise</span><span class="o">=</span><span class="n">enterprise</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">list_car</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">get_queryset</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">CarSerializer</span>
    <span class="n">raise_exception</span> <span class="o">=</span> <span class="bp">True</span>  <span class="c1"># переопределение поля исключения, в случае не аутентифицированного пользователя
</span>
</code></pre></div></div>
<p>На примере выше мы переопределили родительский метод <code class="highlighter-rouge">get_queryset</code>. Внутри метода обратились к данным текущего пользователя, <code class="highlighter-rouge">user_name = self.request.user.username</code>. Затем использовали запрос к модели <code class="highlighter-rouge">Enterprise  через objects.get</code> с параметрами запроса полей через связную таблицу. В данном случае мы обращаемся к модели  <code class="highlighter-rouge">Enterprise</code>, через связную (по первичному ключу) модель <code class="highlighter-rouge">manager</code> по полю <code class="highlighter-rouge">username</code> соответствующему значению <code class="highlighter-rouge">username</code>, которое мы вытащили из <code class="highlighter-rouge">self.request</code>. Затем, получив объект в виде <code class="highlighter-rouge">enterprise</code>, мы фильтруем по названию предприятия те автомобили, которые к нему привязаны, (<code class="highlighter-rouge">list_car = Car.objects.filter(of_enterprise=enterprise)</code> ), и возвращаем список найденных автомобилей в стандартное поле класса <code class="highlighter-rouge">queryset</code>. <br />
Это достаточно тривиальный пример, который показывает логику запросов и фильтраций.</p>

<p>Теперь каждый «залогиненый» пользователь (manager), при обращении к визуализатору списка автомобилей, будет получать список только тех автомобилей, которые закреплены за его предприятием. Тем самым, мы добились разграничения доступа пользователей к ресурсам.</p>

:ET