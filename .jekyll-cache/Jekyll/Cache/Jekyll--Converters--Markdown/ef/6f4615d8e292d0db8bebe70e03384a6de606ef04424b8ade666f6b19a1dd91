I"%<p><img src="/image/post-2021-07-16/logo.jpg" alt="" /></p>

<p>Платформа <strong>.NET</strong> и ее базовый язык программирования - C# на сегодняшний день входит в топ 5 самых популярных языков программирования (по данным площадки GitHub).</p>

<p>C# является языком с Си-подобным синтаксисом и близок в этом отношении к C++ и Java.</p>

<p>Первая версия языка вышла вместе с релизом Microsoft Visual Studio .NET в феврале 2002 года. Текущей версией языка является версия C# 9.0, которая вышла 10 ноября 2020 года вместе с релизом .NET 5.</p>

<p>Как я уже сказал, сам C# является базовым языком, на котором основана платформа .Net.<br />
.Net долгое время развивалась,  преимущественно, как платформа для Windows под названием .NET Framework. В 2019 вышла последняя версия этой платформы - .NET Framework 4.8. На данный момент она больше не развивается.<br />
С 2014 Microsoft стал развивать альтернативную платформу - <strong>.NET Core</strong>, которая уже предназначалась для разных платформ и должна была вобрать в себя все возможности устаревшего <strong>.NET Framework</strong> и добавить новую функциональность.</p>

<p>Платформу .Net можно охарактеризовать следующими характерными чертами:</p>

<ul>
  <li>Поддержка нескольких языков.</li>
  <li>Кроссплатформенность.</li>
  <li>Мощная библиотека классов.</li>
  <li>Высокая Производительность.</li>
</ul>

<p>Все эти черты достигаются благодаря общеязыковой среде исполнения <strong>CLR (Common Language Runtime)</strong>.<br />
<strong>CLR</strong> - это базовый компонент виртуальной машины .Net, который присутствует в каждой версии платформы. Если очень просто описать суть CLR то это, своего рода, виртуальная машина, которая управляет выполнением программ, (менеджмент памяти, обработка исключений, сборка мусора, управление потоками, трансляция промежуточного кода в машинный и т.д.) написанных на языках, поддерживаемых платформой .Net (самые известные это Python (IronPython), JavaScript(IronJS), C++, Visual Basic(VB.Net)).</p>

<p>На самом деле, описанию архитектуры CLR и ее функционалу посвящены целые книги, и все устроено гораздо сложнее и детализированее, но я хотел бы рассказать о самой сути, чтобы было общее понимание темы.</p>

<p>Допустим, у нас есть исходный код C# (или написанный на другом поддерживаемом языке).<br />
После трансляции этого кода, соответствующий компилятор или интерпретатор (в зависимости от языка) перерабатывает исходный код в ,так называемый, промежуточный (машинно-независимый) IL-код <strong>Intermediate Language</strong> и метаданные. Метаданные включают в себя информацию о типах, фактические реализации функций программы, данные о версиях и тд.<br />
Далее в работу вступает CLR, которая обеспечивает выполнение управляемого промежуточного IL-кода. Внутри себя CLR еще использует <strong>JIT (Just-In-Time) компилятор</strong>, который преобразует IL-код в машинный код, специфичный для компьютерной среды, на которой работает JIT-компилятор. IL преобразуется в машинный код по требованию, то есть JIT-компилятор компилирует IL по мере необходимости, а не полностью.<br />
Машинный код, полученный с использованием JIT-компилятора, затем исполняется процессором компьютера.</p>

<p>CLR также использует библиотеки классов .Net. Метаданные предоставляют информацию о языке программирования, среде, версии и библиотеках классов. Тем самым мы получаем кроссплатформенность, потому что не важно на какой платформе запускается исходный код, CLR сделает все сама, главное предоставить ей IL-код. То есть языки высокого уровня (или их отдельные интерпретаторы/компиляторы), должны поддерживать <strong>CLI (Common Language Infrastructure)</strong> – это именно тот промежуточный IL-код, который может быть транслирован непосредственно в машинный код при помощи виртуальной машины CLR.</p>

<p>Я попробовал упрощенно изобразить весь процесс схематически:</p>

<p><img src="/image/post-2021-07-16/shemeCLR.jpg" alt="" /></p>

<p>В виде отдельных стадий процесс упрощенно будет выглядеть примерно так:</p>

<p><img src="/image/post-2021-07-16/stages.jpg" alt="" /></p>

:ET