I"&<p><img src="/image/post-2020-11-11/logo.JPG" alt="" /></p>

<p>В данной статье я хотел бы рассмотреть процесс вызова подпрограмм (функций) в императивной парадигме программирования, на примере изучаемого мной Питона. 
А также немного затронуть основную суть синхронного (классического) и асинхронного вызова функций.</p>

<p>В 1946 г Джон фон Нейман, Герман Голдстайн и Артур Беркс в своей совместной статье изложили принципы построения и функционирования ЭВМ. Впоследствии на основе этих принципов производились первые два поколения компьютеров. 
В более поздних поколениях происходили некоторые изменения, хотя принципы Неймана актуальны и сегодня.<br />
По одному из указанных принципов фон Неймана программа состоит из набора команд, которые выполняются процессором друг за другом в определенной последовательности. Выполнение инструкций (или программного кода) применительно к императивной парадигме программирования происходит последовательно или сверху вниз по мере чтения кода. 
Имея в своем арсенале такие элементарные конструкции как переменные, ветвления и циклы можно запрограммировать (описать на языке программирования) практически любую задачу.</p>

<p>В ходе написания программы мы неизбежно сталкиваемся с ситуацией многократного повторного использования одного и того же кода. Эти повторяющиеся участки программного кода, согласно принципу <strong>DRY</strong> - Don’t repeat yourself (не повторяй себя), принято локализовать и выделять в отдельные подпрограммы (или функции).</p>

<p>Давайте рассмотрим процесс вызова функций из главной программы. Как я уже ранее отмечал в своей <a href="https://optima740.github.io/imperative/2020/02/17/go-to-stage-down/">статье</a> , при запуске программы, операционная система генерирует процесс. Процесс, в свою очередь, получает свой собственный набор (пространство) адресов памяти. Это такой способ разграничить ресурсы одной программы от другой, чтобы избежать использование памяти одного процесса другим: все адреса памяти, к которым процесс может обращаться принадлежат только ему.</p>

<p>Пространство памяти внутри процесса, если описать очень упрощенно, делится на несколько сегментов:</p>

<ul>
  <li><strong>Сегмент данных (обрабатываемых значений).</strong></li>
  <li><strong>Сегмент команд (кода).</strong></li>
  <li><strong>Стек вызова.</strong></li>
</ul>

<p>Сегмент данных - это динамическая память (куча - heap), в которой содержатся данные (объекты) для вычисления в коде.</p>

<p><img src="/image/post-2020-11-11/steck.jpg" alt="" /></p>

<p>На схеме выше, я постарался отобразить ход выполнения программы, в которой используется вызов функций. Весь исполняемый код располагается в сегменте команд. 
При выполнении главной программы <strong><code class="highlighter-rouge">__main__</code></strong> интерпретатор языка доходит до точки вызова функции <strong><code class="highlighter-rouge">foo()</code></strong>, после чего, в стек вызова заносится адрес возврата. Это та точка в основной программе, куда будет возвращено управление после выполнения функции <strong><code class="highlighter-rouge">foo()</code></strong> посредствам оператора <strong><code class="highlighter-rouge">return</code></strong>. Формально, если коснуться более низкого уровня – ассемблера, после выполнения любой функции происходит вызов инструкции <strong><code class="highlighter-rouge">RET</code></strong>, которая уже использует стек с адресами возврата для передачи управления обратно в точку первоначального вызова. Точно также происходит и в случае еще одной вложенной функции <strong><code class="highlighter-rouge">bar()</code></strong>. После ее вызова в стек добавляется адрес возврата в функцию <strong><code class="highlighter-rouge">foo()</code></strong>. И, как только выполнится <strong><code class="highlighter-rouge">bar()</code></strong>, ее <strong><code class="highlighter-rouge">return</code></strong> вернет ход программы в <strong><code class="highlighter-rouge">foo()</code></strong>, используя адрес возврата из стека. А затем, после выполнения <strong><code class="highlighter-rouge">foo()</code></strong>, вытащит из стека самый нижний элемент – адрес возврата в <strong><code class="highlighter-rouge">__main__</code></strong>.</p>

<p>И вот тут мы плавно подошли к теме нитей выполнения. Дело в том, что во время выполнения всех вложенных функций главная программа <strong><code class="highlighter-rouge">__main__</code></strong> , как-бы, ожидает пока выполнится <strong><code class="highlighter-rouge">foo()</code></strong>. А <strong><code class="highlighter-rouge">foo()</code></strong>, в свою очередь, ожидает выполнения <strong><code class="highlighter-rouge">bar()</code></strong>. Такая модель вызовов функций называется синхронными вызовами (или классическими вызовами).</p>

<p><img src="/image/post-2020-11-11/sinchronic.jpg" alt="" /></p>

<p>Существует еще одна модель выполнения кода – асинхронная. В этом случае вызванная функция выполняется параллельно основной программе. Но, в таком случае, сразу встает вопрос о том, в какой момент, и в какую точку необходимо вернуть значение вызванной функции <strong><code class="highlighter-rouge">foo()</code></strong> в параллельно выполняющуюся <strong><code class="highlighter-rouge">__main__</code></strong>. И что делать, если <strong><code class="highlighter-rouge">foo()</code></strong> выполнилась раньше или позже от ожидаемого момента в основной программе.<br />
Но асинхронная модель потому и названа таковой, что обе нити периодически обмениваются состоянием своего выполнения. И одна из нитей имеет возможность подстроиться под ход выполнения другой, ожидая ее в нужных моментах.<br />
На схеме ниже я постарался привести такой пример выполнения.</p>

<p><img src="/image/post-2020-11-11/asinchronic.jpg" alt="" /></p>

<p>Таким образом, я постарался наглядно описать (пусть и в очень упрощенной форме), ту механику, которая происходит при вызове функций, или в классическом понимании – подпрограмм.</p>

<p><a href="https://www.youtube.com/c/%D0%A2%D0%B8%D0%BC%D0%BE%D1%84%D0%B5%D0%B9%D0%A5%D0%B8%D1%80%D1%8C%D1%8F%D0%BD%D0%BE%D0%B2/featured"><code class="highlighter-rouge">В статье использовались материалы из курса лекций преподавателя кафедры информатики МФТИ Тимофея Хирьянова.</code></a></p>

:ET