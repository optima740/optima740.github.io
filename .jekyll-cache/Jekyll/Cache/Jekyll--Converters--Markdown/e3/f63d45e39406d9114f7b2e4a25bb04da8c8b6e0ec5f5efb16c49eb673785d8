I"&0<p><img src="/image/post-2020-06-14/admin.jpg" alt="" />
В Django, как мы знаем, очень много уже реализованного функционала идет сразу в комплекте, так сказать, «из коробки». Сделано это разработчиками для нашего удобства и, соответственно, для простоты разработки пользовательских проектов на данном вебфреймворке. За что, конечно-же, отдельное спасибо разработчикам.</p>

<p>Давайте рассмотрим админку. Админ панель в Django представляет из себя своего рода пункт управления для администратора, где можно созвать, редактировать, удалять модели, объединять в группы созданных пользователей, назначать им права и многое другое. Для того, чтобы попасть в админку, необходимо пройти по адресу  <code class="highlighter-rouge">http://127.0.0.1:8000/admin/</code>. Далее мы попадем на страницу авторизации. Но для того, чтобы мы успешно авторизовались, необходимо заранее создать суперпользователя (собственно, самого админа).</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py createsuperuser
</code></pre></div></div>
<ul>
  <li>где мы указываем username , email и password с подтверждением.</li>
</ul>

<p>Теперь мы можем успешно пройти авторизацию и попасть в админку с возможностью использовать весь функционал администратора.<br />
Но в процессе разработки бывают ситуации, когда необходимо «подогнать» под себя, или кастомизировать стандартную админку Django. Сейчас я не буду углубляться во все способы и возможности это сделать (например, через наследование от класса <code class="highlighter-rouge">admin.ModelAdmin</code> и переопределение поля для отображения полей модели, добавление фильтров и поиска и т.д.).</p>

<p>Сегодня я хотел бы рассказать, как быстро сделать свою пользовательскую кнопку прямо в админ страничке, по нажатию на которую происходил бы GET запрос, и нам представлялся бы пользовательский шаблон HTML (ну или какой-либо user interface).<br />
Итак, для добавления своей кнопки нам необходимо убедиться, что наше приложение указано в <code class="highlighter-rouge">settings.py</code> в списке <code class="highlighter-rouge">NSTALLED_APPS</code>. Далее нам необходимо создать «расширение» для стандартного админ-шаблона <code class="highlighter-rouge">change_form.html</code>. Разместить его можно по одной из следующих схем:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Шаблон применяется ко всем change_form:
</span><span class="n">myproject</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">admin</span><span class="o">/</span><span class="n">change_form</span><span class="o">.</span><span class="n">html</span>      

<span class="c1"># Шаблон применяется к change_lists моего приложения myapp:
</span><span class="n">myproject</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">admin</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">change_form</span><span class="o">.</span><span class="n">html</span>  

<span class="c1"># Шаблон применяется к change_list моего приложения myapp и только для модели mymodel:
</span><span class="n">myproject</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">admin</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">mymodel</span><span class="o">/</span><span class="n">change_form</span><span class="o">.</span><span class="n">html</span>  
</code></pre></div></div>

<p>Тут стоит сделать оговорку, и проверить правильно ли размещена директория templates. Она должна быть на одном уровне дерева каталогов с файлом <code class="highlighter-rouge">manage.py</code> и нашей базой данных <code class="highlighter-rouge">bd.sqlite3</code>.<br />
Если, все же, после размещения шаблона по одному из указанных путей, шаблон не определяется Django автоматически, то можно прописать его принудительно в виде атрибута внутри класса админ-модели в <code class="highlighter-rouge">admin.py</code>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyModelAdmin</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
    <span class="c1">#... 
</span>    <span class="n">change_list_template</span> <span class="o">=</span> <span class="s">"path/to/change_form.html"</span>  
</code></pre></div></div>
<p>Затем, нам необходимо отредактировать содержимое нашего расширения для стандартного <code class="highlighter-rouge">change_form.html</code>:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% extends "admin/change_form.html" %}
{% load i18n %}

{% block submit_buttons_bottom %}

    <span class="nt">&lt;input</span> <span class="na">value=</span><span class="s">"Button_title"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">onclick=</span><span class="s">"location.href='{% url 'admin:user_view' %}'"</span> <span class="nt">/&gt;</span>

{{ block.super }}

{% endblock %}
</code></pre></div></div>
<p>Данным кодом мы расширяем стандартный джанговский функционал, который внедрит нашу кнопку с именем <code class="highlighter-rouge">Button_title</code>, и при нажатии отправит GET запрос для <code class="highlighter-rouge">user_view</code>.<br />
Всю механику отлова url и подстановки под этот url нашей пользовательской <code class="highlighter-rouge">user_view</code> будем делать внутри админ-модели в методе <code class="highlighter-rouge">get_urls()</code>.</p>

<p>Ниже в моем примере, использовался шаблон для расширения (отрисовки кнопки) – <code class="highlighter-rouge">my_change_form.html</code>, пользовательская функция-вьюха - <code class="highlighter-rouge">get_repayment()</code>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RepaymentAdmin</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Repayment</span>
    <span class="n">list_display</span> <span class="o">=</span> <span class="p">[</span><span class="s">'customer'</span><span class="p">,</span> <span class="s">'payment_summ'</span><span class="p">,</span> <span class="s">'create_data'</span><span class="p">,</span> <span class="s">'processing_date'</span><span class="p">,</span> <span class="s">'status'</span><span class="p">,</span> <span class="s">'account_number'</span><span class="p">]</span> <span class="c1"># определяем отображаемые поля модели Repayment внутри админ-модели RepaymentAdmin
</span>
    <span class="k">def</span> <span class="nf">get_urls</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
	<span class="c1"># метод обработки url, с подстановкой необходимой view.
</span>
        <span class="n">urls</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">RepaymentAdmin</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">get_urls</span><span class="p">()</span>
        <span class="n">custom_urls</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">path</span><span class="p">(</span><span class="s">'get/'</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">admin_site</span><span class="o">.</span><span class="n">admin_view</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_repayment</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">'repayment_view'</span><span class="p">),</span> <span class="p">]</span>
        <span class="k">return</span>  <span class="n">custom_urls</span> <span class="o">+</span> <span class="n">urls</span>

    <span class="k">def</span> <span class="nf">get_repayment</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
    	<span class="c1"># внутри данного метода (который подставится под запрос url), мы выполним какую-либо логику, и вернем в ответ пользовательский шаблон index.html
</span>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'index.html'</span><span class="p">,</span> <span class="nb">locals</span><span class="p">())</span>

    <span class="c1"># переопределяем атрибут для принудительного использования нашего шаблона:
</span>    <span class="n">change_form_template</span> <span class="o">=</span> <span class="s">'admin/myapp/repayment/my_change_form.html'</span>
</code></pre></div></div>
<p>В итоге у нас должна отрисоваться пользовательская кнопка внутри админ страницы в модели пользователя, при нажатии на которую отработает метод <code class="highlighter-rouge">def get_repayment</code> и вернет пользовательский HTML шаблон:</p>

<p><img src="/image/post-2020-06-14/Screenshot_1.jpg" alt="" /></p>

:ET