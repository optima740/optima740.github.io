I":$<p><img src="/image/post-2020-11-15/logo.JPG" alt="" /></p>

<p>В предыдущей своей статье я затронул общую упрощенную механику, на основе изученного мной материала, вызова функций и нитей исполнения кода. Но вскоре, идея раскрыть тему функций более подробно, все же заставила меня написать вторую часть статьи, в которой я попытаюсь глубже описать процессы происходящие при вызове и исполнении функции, на примере изучаемого мной языка Python.</p>

<p>Питон – язык, использующий интерпретатор (в самом распространенном случае это CPython, реализованный на C). Вообще, тема трансляторов - это отдельная тема для изучения и освещения, в данной статье я затрону ее очень поверхностно, ровно для понимания темы текущего поста. Итак, существуют два вида трансляторов – это <em>компилятор</em> и <em>интерпретатор</em>.<br />
Как работает компилятор я уже описывал в одной из своих первых <a href="https://optima740.github.io/imperative/2020/02/17/go-to-stage-down/">статей</a>.<br />
Интерпретатор, в отличие от компилятора (он переводит исходный код сразу в машинный), переводит исходный код сначала в промежуточный байт-код, который выполняется в, так называемой, виртуальной машине и, соответственно, не привязан к конкретной платформе. Эта самая виртуальная машина, в случае с Питоном, имеет стековый тип (бывают еще регистровые виртуальные машины).<br />
Выполняя промежуточный байт-код, в который интерпретатор перевел исходный код, интерпретатор работает со стеком.</p>

<p><strong>Создание функции</strong></p>

<p><img src="/image/post-2020-11-15/pic1.jpg" alt="" /><br />
По порядку сверху вниз в байт-коде выполняются операторы.<br />
LOAD_CONST - загружает в стек <code class="highlighter-rouge">code object</code> с адресом нашей функции (по сути это объект - в питоне все есть объект).<br />
Далее MAKE_FUNCTION создает из <code class="highlighter-rouge">code object</code> функцию и возвращает ее обратно в стек.<br />
STORE_NAME - связывает полученную функцию с ее именем <code class="highlighter-rouge">my_sum</code>, для доступа к ней.</p>

<p><strong>Вызов функции</strong></p>

<p>Далее в байт-код преобразуется строчка исходного кода:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>result = 100 + my_sum(20, 30).
</code></pre></div></div>

<p>Рассмотрим правую часть выражения. Первым аргументом бинарного оператора сложения (BINARY_ADD) является константа <code class="highlighter-rouge">100</code>. Вторым оператором является функция <code class="highlighter-rouge">my_sum</code> со своими фактическими параметрами <code class="highlighter-rouge">20</code> и <code class="highlighter-rouge">30</code>.</p>

<p><img src="/image/post-2020-11-15/pic1-1.jpg" alt="" /><br />
LOAD_CONST - загружает константу со значением <code class="highlighter-rouge">100</code> в стек.<br />
Далее, LOAD_NAME - загружает нашу функцию <code class="highlighter-rouge">my_sum</code> (точнее ее адрес в памяти, который связан с ее именем ссылкой).<br />
LOAD_CONST – загружает аргументы функции (константы <code class="highlighter-rouge">20</code> и <code class="highlighter-rouge">30</code>). Т.к. структура «стек» имеет схему доступа, работающую по принципу <strong>LIFO</strong> (<strong>last in — first out</strong>, «последним вошел — первым вышел»), то на верхушке стека оказывается последний загруженный элемент, а именно второй аргумент функции – число <code class="highlighter-rouge">30</code>.<br />
CALL_FUNCTION [2] – Происходит вызов функции с двумя аргументами. После чего создается еще один новый пустой стек (на рисунке <strong>стек-2</strong>) для выполнения функции.</p>

<p><strong>Выполнение функции</strong></p>

<p>В <strong>стек-2</strong> (стек выполнения функции <code class="highlighter-rouge">my_sum</code>) передаются 2 аргумента из нашего <strong>стек-1</strong> – это константы <code class="highlighter-rouge">30</code> и <code class="highlighter-rouge">20</code>:</p>

<p><img src="/image/post-2020-11-15/pic2.jpg" alt="" /><br />
В байт-коде:</p>

<p>LOAD_FAST [‘a’] – передает значение аргумента <code class="highlighter-rouge">a</code>.<br />
LOAD_FAST [‘b’] – передает значение аргумента <code class="highlighter-rouge">b</code>.<br />
Бинарный оператор сложения – BINARY_ADD производит сложения переменных <code class="highlighter-rouge">a</code> и <code class="highlighter-rouge">b</code>.<br />
Результат работы функции возвращается оператором RETURN_VALUE.<br />
Таким образом, на место вызова функции <code class="highlighter-rouge">my_sum</code> в <strong>стек-1</strong> (по адресу возврата) вернется значение <code class="highlighter-rouge">50</code>. После чего функция завершает свою работу, все ее локальные переменные будут удалены из памяти сборщиком мусора - Garbage Collector (это также тема для отдельной статьи:)<br />
Далее, у нас следует (по исходному коду) оператор сложения константы <code class="highlighter-rouge">100</code> и <code class="highlighter-rouge">50</code> - результата выполнения нашей функции.</p>

<p><img src="/image/post-2020-11-15/pic3.jpg" alt="" /><br />
Аналогичным образом выполняется BINARY_ADD с 2 аргументами <code class="highlighter-rouge">100</code> и <code class="highlighter-rouge">50</code>, и результат выполнения связывается ссылкой с именем переменной <code class="highlighter-rouge">result</code> - выполняется оператор присваивания. Таким образом, переменная <code class="highlighter-rouge">result = 150</code>.</p>

<p>Данный пример более наглядно и реалистично показывает механику вызова функций на примере Python.<br />
Вообще, я считаю, что понятие функции (как подпрограммы) в программировании, носит фундаментальный характер. Ведь, если абстрактно взглянуть на программирование, то мы увидим, что <strong>объект</strong> это, ничто иное, как функция с внутренним состоянием (памятью). <strong>Класс</strong> – это генератор объектов, по сути, тоже функция, которая возвращает как результат - объект (который так же является функцией), у каждого такого объекта своя изолированная память – <strong>инкапсуляция</strong>. Ну и если сюда добавить концепцию <strong>наследования</strong>, то мы получаем <strong>ООП</strong> :)</p>

:ET