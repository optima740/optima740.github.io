I"2/<p><img src="/image/post-2021-01-10/1.png" alt="" /></p>

<p>Продолжаем тему концепции <a href="https://optima740.github.io/universe/2021/03/25/programming-universe6/">параллелизма</a>.<br />
На первый взгляд параллельное программирование выглядит многообещающим и эффективным способом повысить производительность программной системы. <br />
Но есть один существенный момент в данной концепции, который является и основной проблемой. После того, как в программной системе появились именованные состояния и параллелизм одновременно- это привело к появлению явного (наблюдаемого) <strong>недетерминизма</strong> (вспоминаем <a href="https://optima740.github.io/universe/2021/01/26/programming-universe3/">статью</a> про вычислительные модели и степень недетерминизма). То есть программа от вызова к вызову может выдавать разные результаты на одних и тех же входных данных. Так случается потому, что потоки могут получать доступ к именованным состояниям (переменным) в непредсказуемом порядке, который зависит от внешних условий. И причина этой изменчивости (недетерминизма) в том, что точное время, когда будет выполнена та или иная инструкция в программе теперь неизвестно потому, что потоки работают независимо и не представляют, какие инструкции выполняются в других потоках. Иначе данную ситуацию в параллельном программировании называют <strong>проблемой конкуренции</strong> или <strong>race condition</strong>.</p>

<p>Рассмотрим пример кода Python ниже.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="c1"># функция 1 потока
</span><span class="k">def</span> <span class="nf">thread_one</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># функция 2 потока
</span><span class="k">def</span> <span class="nf">thread_two</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div>
<p>В результате такой работы в переменной <strong><code class="highlighter-rouge">a</code></strong> будет либо 1, либо 2, но мы не можем заранее предсказать, какое значение именно. Причина в том, что в реальных условиях работа потоков чередуется, причём в общем случае невозможно понять как.<br />
Дело в том, что исходный код программы транслируется интерпретатором в двоичный машинный код (если упростить), и механизм обеспечения одновременного выполнения потоков выделяет, так называемый, квант времени поочерёдно каждому потоку. За этот квант времени может, например, выполниться всего одна машинная инструкция, то есть явную привязку квантованного выполнения к исходному коду выполнить фактически невозможно. 
Но, даже если мы будем условно считать, что за один квант выполняется одна инструкция исходного кода, ситуация не проясняется.</p>

<p>В представленном коде выше, я привел самый простой пример, но в реальных программах, где смешиваются параллельные вычисления и именованные состояния, постоянно возникают значительно более сложные конфликтные ситуации. <br />
В истории существует печально известный пример ситуации с <em>race condition</em> - это канадский аппарат лучевой терапии <a href="https://ru.wikipedia.org/wiki/Therac-25"><em>Therac-25</em></a>, который из-за подобного бага в своем софте выдавал пациентам дозы, в тысячи раз превышающие назначенные, что приводило к смертям и тяжёлым заболеваниям. Одна и та же переменная в этом аппарате использовалась сразу в двух вычислительных задачах, которые могли выполняться одновременно.</p>

<p>Из всего выше изложенного следует вывод: <em>по возможности не использовать вместе параллелизм и именованные состояния</em>. Программу практически всегда можно спроектировать так, чтобы разделить эти аспекты, или, в самом крайнем случае, ограниченно и наглядно совместить их в небольшой и хорошо изолированной части проекта.</p>

<p>Однако, существуют способы организовать программу таким образом, что одновременное использование параллелизма и именованных состояний будет давать корректный результат и в целом такая схема остается вполне применимой. Наверное, одним из самых известных и хороших способов правильно организовать программирование с параллелизмом и состоянием - это использовать <strong>атомарные операции</strong>.</p>

<p><em>Атомарная операция</em>, как бы, инкапсулирует внутри себя некоторые инструкции кода, и делает их неделимыми во времени. То есть, мы имеем начало атомарной операции и сразу результат, а промежуточные состояния внутри атомарной операции нам недоступны.<br />
Поэтому одним из способов борьбы с <em>race conditions</em> является организация потоково-безопасной (thread-safe) работы программы. Программисту предоставляется механизм атомарного выполнения- набор действий над общей переменной объявляется некоторому потоку атомарным, и пока он полностью не закончится, никакой другой поток не сможет работать с этой переменной.<br />
С помощью атомарных операций мы можем решить вышеприведённую проблему с неверным итоговым изменением переменной <strong><code class="highlighter-rouge">a</code></strong> в нескольких потоках. Идея заключается в том, чтобы обеспечить такой режим работы, когда тело каждого потока будет атомарным.</p>

<p>Рассмотрим следующий псевдокод:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>thread A
a = 0
запуск thread B
начало атомарной операции
a = a + 1
конец атомарной операции
ожидание окончания работы thread B
print a

thread B
начало атомарной операции
a = a + 2
конец атомарной операции
</code></pre></div></div>
<p>В результате на консоль всегда будет выводиться 3.</p>

<p>В различных языках программирования атомарные операции представлены по-разному. Например, в Python данные операции можно реализовать с помощью <em>блокировок</em> (Lock). 
Класс <strong><code class="highlighter-rouge">RLock</code></strong> – это блокировка (или замок).<br />
<em>Блокировка</em> -  фундаментальный механизм синхронизации, который предоставлен модулем <code class="highlighter-rouge">threading</code> в Python.  <br />
Замки используются для синхронизации доступа к общим ресурсам. Для каждого такого источника создается объект <code class="highlighter-rouge">Lock</code>. Когда нам нужно получить доступ к общему ресурсу, мы вызываем <code class="highlighter-rouge">acquire</code> для того, чтобы поставить блок на время работы потока с данным ресурсом, после чего вызываем <code class="highlighter-rouge">release</code>, тем самым открывая доступ к общему ресурсу:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">RLock</span><span class="p">()</span> 
<span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span> <span class="c1"># Выполнит блокировку данного участка кода
</span><span class="o">...</span> <span class="c1">#доступ к общим ресурсам
</span><span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span> <span class="c1"># Снятие блокировки 
</span></code></pre></div></div>

<p>В любом случае во избежание ситуации <em>race condition</em>, при организации параллельных вычислений всегда необходимо обеспечивать атомарность операций, насколько это возможно.</p>

<p>В следующей статье мы поговорим о еще одной ключевой концепции программирования – <strong>абстракции данных</strong>.</p>

:ET